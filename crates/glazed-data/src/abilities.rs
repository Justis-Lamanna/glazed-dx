use serde::{Serialize, Deserialize, Serializer, Deserializer};

/// Represents an Ability a Pokemon has
#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Serialize, Deserialize)]
pub enum Ability {
    AirLock,
    ArenaTrap,
    BattleArmor,
    Blaze,
    Cacophony,
    Chlorophyll,
    ClearBody,
    CloudNine,
    ColorChange,
    CompoundEyes,
    CuteCharm,
    Damp,
    Drizzle,
    Drought,
    EarlyBird,
    EffectSpore,
    FlameBody,
    FlashFire,
    Forecast,
    Guts,
    HugePower,
    Hustle,
    HyperCutter,
    Illuminate,
    Immunity,
    InnerFocus,
    Insomnia,
    Intimidate,
    KeenEye,
    Levitate,
    LightningRod,
    Limber,
    LiquidOoze,
    MagmaArmor,
    MagnetPull,
    MarvelScale,
    Minus,
    NaturalCure,
    Oblivious,
    Overgrow,
    OwnTempo,
    Pickup,
    Plus,
    PoisonPoint,
    Pressure,
    PurePower,
    RainDish,
    RockHead,
    RoughSkin,
    RunAway,
    SandStream,
    SandVeil,
    SereneGrace,
    ShadowTag,
    ShedSkin,
    ShellArmor,
    ShieldDust,
    Soundproof,
    SpeedBoost,
    Static,
    Stench,
    StickyHold,
    Sturdy,
    SuctionCups,
    Swarm,
    SwiftSwim,
    Synchronize,
    ThickFat,
    Torrent,
    Trace,
    Truant,
    VitalSpirit,
    VoltAbsorb,
    WaterAbsorb,
    WaterVeil,
    WhiteSmoke,
    WonderGuard,
    Adaptability,
    Aftermath,
    AngerPoint,
    Anticipation,
    BadDreams,
    Download,
    DrySkin,
    Filter,
    FlowerGift,
    Forewarn,
    Frisk,
    Gluttony,
    Heatproof,
    HoneyGather,
    Hydration,
    IceBody,
    IronFist,
    Klutz,
    LeafGuard,
    MagicGuard,
    MoldBreaker,
    MotorDrive,
    Multitype,
    NoGuard,
    Normalize,
    PoisonHeal,
    QuickFeet,
    Reckless,
    Rivalry,
    Scrappy,
    Simple,
    SkillLink,
    SlowStart,
    Sniper,
    SnowCloak,
    SnowWarning,
    SolarPower,
    SolidRock,
    Stall,
    Steadfast,
    StormDrain,
    SuperLuck,
    TangledFeet,
    Technician,
    TintedLens,
    Unaware,
    Unburden,
    Analytic,
    BigPecks,
    Contrary,
    CursedBody,
    Defeatist,
    Defiant,
    FlareBoost,
    FriendGuard,
    Harvest,
    Healer,
    HeavyMetal,
    Illusion,
    Imposter,
    Infiltrator,
    IronBarbs,
    Justified,
    LightMetal,
    MagicBounce,
    Moody,
    Moxie,
    Multiscale,
    Mummy,
    Overcoat,
    Pickpocket,
    PoisonTouch,
    Prankster,
    Rattled,
    Regenerator,
    SandForce,
    SandRush,
    SapSipper,
    SheerForce,
    Telepathy,
    Teravolt,
    ToxicBoost,
    Turboblaze,
    Unnerve,
    VictoryStar,
    WeakArmor,
    WonderSkin,
    ZenMode,
    Competitive,
    SlushRush,
    Protean
}
impl Ability {
    pub fn is_ignore_ability_ability(&self) -> bool {
        match self {
            Ability::MoldBreaker | Ability::Teravolt | Ability::Turboblaze => true,
            _ => false
        }
    }
}

/// Represents the ability(s) for a Pokemon
#[derive(Debug, Copy, Clone)]
pub enum PokemonAbility {
    One(Ability),
    Two(Ability, Ability)
}
impl Serialize for PokemonAbility {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error> where S: Serializer {
        match self {
            PokemonAbility::One(a) => vec![*a].serialize(serializer),
            PokemonAbility::Two(a, b) => vec![*a, *b].serialize(serializer)
        }
    }
}
impl<'de> Deserialize<'de> for PokemonAbility {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error> where D: Deserializer<'de> {
        let mut s = Vec::<Ability>::deserialize(deserializer)?;
        if s.len() == 1 {
            Ok(Self::One(s.pop().unwrap()))
        } else if s.len() == 2 {
            Ok(Self::Two(s.pop().unwrap(), s.pop().unwrap()))
        } else {
            use serde::de::Error;
            Err(D::Error::invalid_length(s.len(), &"One or two types only"))
        }
    }
}