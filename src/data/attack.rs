use crate::data::types::Type;

#[derive(Debug)]
pub enum Move {
    Pound,
    KarateChop,
    DoubleSlap,
    CometPunch,
    MegaPunch,
    PayDay,
    FirePunch,
    IcePunch,
    ThunderPunch,
    Scratch,
    ViseGrip,
    Guillotine,
    RazorWind,
    SwordsDance,
    Cut,
    Gust,
    WingAttack,
    Whirlwind,
    Fly,
    Bind,
    Slam,
    VineWhip,
    Stomp,
    DoubleKick,
    MegaKick,
    JumpKick,
    RollingKick,
    SandAttack,
    Headbutt,
    HornAttack,
    FuryAttack,
    HornDrill,
    Tackle,
    BodySlam,
    Wrap,
    TakeDown,
    Thrash,
    DoubleEdge,
    TailWhip,
    PoisonSting,
    Twineedle,
    PinMissile,
    Leer,
    Bite,
    Growl,
    Roar,
    Sing,
    Supersonic,
    SonicBoom,
    Disable,
    Acid,
    Ember,
    Flamethrower,
    Mist,
    WaterGun,
    HydroPump,
    Surf,
    IceBeam,
    Blizzard,
    Psybeam,
    BubbleBeam,
    AuroraBeam,
    HyperBeam,
    Peck,
    DrillPeck,
    Submission,
    LowKick,
    Counter,
    SeismicToss,
    Strength,
    Absorb,
    MegaDrain,
    LeechSeed,
    Growth,
    RazorLeaf,
    SolarBeam,
    PoisonPowder,
    StunSpore,
    SleepPowder,
    PetalDance,
    StringShot,
    DragonRage,
    FireSpin,
    ThunderShock,
    Thunderbolt,
    ThunderWave,
    Thunder,
    RockThrow,
    Earthquake,
    Fissure,
    Dig,
    Toxic,
    Confusion,
    Psychic,
    Hypnosis,
    Meditate,
    Agility,
    QuickAttack,
    Rage,
    Teleport,
    NightShade,
    Mimic,
    Screech,
    DoubleTeam,
    Recover,
    Harden,
    Minimize,
    Smokescreen,
    ConfuseRay,
    Withdraw,
    DefenseCurl,
    Barrier,
    LightScreen,
    Haze,
    Reflect,
    FocusEnergy,
    Bide,
    Metronome,
    MirrorMove,
    SelfDestruct,
    EggBomb,
    Lick,
    Smog,
    Sludge,
    BoneClub,
    FireBlast,
    Waterfall,
    Clamp,
    Swift,
    SkullBash,
    SpikeCannon,
    Constrict,
    Amnesia,
    Kinesis,
    SoftBoiled,
    HighJumpKick,
    Glare,
    DreamEater,
    PoisonGas,
    Barrage,
    LeechLife,
    LovelyKiss,
    SkyAttack,
    Transform,
    Bubble,
    DizzyPunch,
    Spore,
    Flash,
    Psywave,
    Splash,
    AcidArmor,
    Crabhammer,
    Explosion,
    FurySwipes,
    Bonemerang,
    Rest,
    RockSlide,
    HyperFang,
    Sharpen,
    Conversion,
    TriAttack,
    SuperFang,
    Slash,
    Substitute,
    Struggle,
    Sketch,
    TripleKick,
    Thief,
    SpiderWeb,
    MindReader,
    Nightmare,
    FlameWheel,
    Snore,
    Curse,
    Flail,
    Conversion2,
    Aeroblast,
    CottonSpore,
    Reversal,
    Spite,
    PowderSnow,
    Protect,
    MachPunch,
    ScaryFace,
    FeintAttack,
    SweetKiss,
    BellyDrum,
    SludgeBomb,
    MudSlap,
    Octazooka,
    Spikes,
    ZapCannon,
    Foresight,
    DestinyBond,
    PerishSong,
    IcyWind,
    Detect,
    BoneRush,
    LockOn,
    Outrage,
    Sandstorm,
    GigaDrain,
    Endure,
    Charm,
    Rollout,
    FalseSwipe,
    Swagger,
    MilkDrink,
    Spark,
    FuryCutter,
    SteelWing,
    MeanLook,
    Attract,
    SleepTalk,
    HealBell,
    Return,
    Present,
    Frustration,
    Safeguard,
    PainSplit,
    SacredFire,
    Magnitude,
    DynamicPunch,
    Megahorn,
    DragonBreath,
    BatonPass,
    Encore,
    Pursuit,
    RapidSpin,
    SweetScent,
    IronTail,
    MetalClaw,
    VitalThrow,
    MorningSun,
    Synthesis,
    Moonlight,
    HiddenPower,
    CrossChop,
    Twister,
    RainDance,
    SunnyDay,
    Crunch,
    MirrorCoat,
    PsychUp,
    ExtremeSpeed,
    AncientPower,
    ShadowBall,
    FutureSight,
    RockSmash,
    Whirlpool,
    BeatUp,
    FakeOut,
    Uproar,
    Stockpile,
    SpitUp,
    Swallow,
    HeatWave,
    Hail,
    Torment,
    Flatter,
    WillOWisp,
    Memento,
    Facade,
    FocusPunch,
    SmellingSalts,
    FollowMe,
    NaturePower,
    Charge,
    Taunt,
    HelpingHand,
    Trick,
    RolePlay,
    Wish,
    Assist,
    Ingrain,
    Superpower,
    MagicCoat,
    Recycle,
    Revenge,
    BrickBreak,
    Yawn,
    KnockOff,
    Endeavor,
    Eruption,
    SkillSwap,
    Imprison,
    Refresh,
    Grudge,
    Snatch,
    SecretPower,
    Dive,
    ArmThrust,
    Camouflage,
    TailGlow,
    LusterPurge,
    MistBall,
    FeatherDance,
    TeeterDance,
    BlazeKick,
    MudSport,
    IceBall,
    NeedleArm,
    SlackOff,
    HyperVoice,
    PoisonFang,
    CrushClaw,
    BlastBurn,
    HydroCannon,
    MeteorMash,
    Astonish,
    WeatherBall,
    Aromatherapy,
    FakeTears,
    AirCutter,
    Overheat,
    OdorSleuth,
    RockTomb,
    SilverWind,
    MetalSound,
    GrassWhistle,
    Tickle,
    CosmicPower,
    WaterSpout,
    SignalBeam,
    ShadowPunch,
    Extrasensory,
    SkyUppercut,
    SandTomb,
    SheerCold,
    MuddyWater,
    BulletSeed,
    AerialAce,
    IcicleSpear,
    IronDefense,
    Block,
    Howl,
    DragonClaw,
    FrenzyPlant,
    BulkUp,
    Bounce,
    MudShot,
    PoisonTail,
    Covet,
    VoltTackle,
    MagicalLeaf,
    WaterSport,
    CalmMind,
    LeafBlade,
    DragonDance,
    RockBlast,
    ShockWave,
    WaterPulse,
    DoomDesire,
    PsychoBoost,
    Roost,
    Gravity,
    MiracleEye,
    WakeUpSlap,
    HammerArm,
    GyroBall,
    HealingWish,
    Brine,
    NaturalGift,
    Feint,
    Pluck,
    Tailwind,
    Acupressure,
    MetalBurst,
    UTurn,
    CloseCombat,
    Payback,
    Assurance,
    Embargo,
    Fling,
    PsychoShift,
    TrumpCard,
    HealBlock,
    WringOut,
    PowerTrick,
    GastroAcid,
    LuckyChant,
    MeFirst,
    Copycat,
    PowerSwap,
    GuardSwap,
    Punishment,
    LastResort,
    WorrySeed,
    SuckerPunch,
    ToxicSpikes,
    HeartSwap,
    AquaRing,
    MagnetRise,
    FlareBlitz,
    ForcePalm,
    AuraSphere,
    RockPolish,
    PoisonJab,
    DarkPulse,
    NightSlash,
    AquaTail,
    SeedBomb,
    AirSlash,
    XScissor,
    BugBuzz,
    DragonPulse,
    DragonRush,
    PowerGem,
    DrainPunch,
    VacuumWave,
    FocusBlast,
    EnergyBall,
    BraveBird,
    EarthPower,
    Switcheroo,
    GigaImpact,
    NastyPlot,
    BulletPunch,
    Avalanche,
    IceShard,
    ShadowClaw,
    ThunderFang,
    IceFang,
    FireFang,
    ShadowSneak,
    MudBomb,
    PsychoCut,
    ZenHeadbutt,
    MirrorShot,
    FlashCannon,
    RockClimb,
    Defog,
    TrickRoom,
    DracoMeteor,
    Discharge,
    LavaPlume,
    LeafStorm,
    PowerWhip,
    RockWrecker,
    CrossPoison,
    GunkShot,
    IronHead,
    MagnetBomb,
    StoneEdge,
    Captivate,
    StealthRock,
    GrassKnot,
    Chatter,
    Judgment,
    BugBite,
    ChargeBeam,
    WoodHammer,
    AquaJet,
    AttackOrder,
    DefendOrder,
    HealOrder,
    HeadSmash,
    DoubleHit,
    RoarOfTime,
    SpacialRend,
    LunarDance,
    CrushGrip,
    MagmaStorm,
    DarkVoid,
    SeedFlare,
    OminousWind,
    ShadowForce,
    HoneClaws,
    WideGuard,
    GuardSplit,
    PowerSplit,
    WonderRoom,
    Psyshock,
    Venoshock,
    Autotomize,
    RagePowder,
    Telekinesis,
    MagicRoom,
    SmackDown,
    StormThrow,
    FlameBurst,
    SludgeWave,
    QuiverDance,
    HeavySlam,
    Synchronoise,
    ElectroBall,
    Soak,
    FlameCharge,
    Coil,
    LowSweep,
    AcidSpray,
    FoulPlay,
    SimpleBeam,
    Entrainment,
    AfterYou,
    Round,
    EchoedVoice,
    ChipAway,
    ClearSmog,
    StoredPower,
    QuickGuard,
    AllySwitch,
    Scald,
    ShellSmash,
    HealPulse,
    Hex,
    SkyDrop,
    ShiftGear,
    CircleThrow,
    Incinerate,
    Quash,
    Acrobatics,
    ReflectType,
    Retaliate,
    FinalGambit,
    Bestow,
    Inferno,
    WaterPledge,
    FirePledge,
    GrassPledge,
    VoltSwitch,
    StruggleBug,
    Bulldoze,
    FrostBreath,
    DragonTail,
    WorkUp,
    Electroweb,
    WildCharge,
    DrillRun,
    DualChop,
    HeartStamp,
    HornLeech,
    SacredSword,
    RazorShell,
    HeatCrash,
    LeafTornado,
    Steamroller,
    CottonGuard,
    NightDaze,
    Psystrike,
    TailSlap,
    Hurricane,
    HeadCharge,
    GearGrind,
    SearingShot,
    TechnoBlast,
    RelicSong,
    SecretSword,
    Glaciate,
    BoltStrike,
    BlueFlare,
    FieryDance,
    FreezeShock,
    IceBurn,
    Snarl,
    IcicleCrash,
    VCreate,
    FusionFlare,
    FusionBolt
}

#[derive(Debug)]
pub enum Accuracy {
    AlwaysHits,
    Percentage(u8)
}

#[derive(Debug)]
pub enum ContestType {
    Tough,
    Cool,
    Beauty,
    Smart,
    Cute
}

#[derive(Debug)]
pub enum DamageType {
    Physical,
    Special,
    Status
}

#[derive(Debug)]
pub enum BattleStat {
    Attack,
    Defense,
    SpecialAttack,
    SpecialDefense,
    Speed,
    Accuracy,
    Evasion
}

#[derive(Debug)]
pub enum NonVolatileBattleAilment {
    Paralysis,
    Sleep,
    Freeze,
    Burn,
    Poison(bool)
}

#[derive(Debug)]
pub enum VolatileBattleAilment {
    Confusion,
    Infatuation
}

#[derive(Debug)]
pub enum Weather {
    HarshSun,
    Rain,
    Sandstorm,
    Hail,
    Fog
}

#[derive(Debug)]
pub enum Target {
    User,
    Ally,
    UserAndAlly,
    UserOrAlly,
    Opponent,
    Opponents,
    AllyOrOpponent,
    RandomOpponent,
    Any,
    AllExceptUser,
    All
}

#[derive(Debug)]
pub enum StatChangeTarget {
    User,
    Target
}

#[derive(Debug)]
pub enum Effect {
    Damage(u8),
    Critical(u8),
    StatChange(BattleStat, i8, u8, StatChangeTarget),
    NonVolatileStatus(NonVolatileBattleAilment, u8),
    VolatileStatus(VolatileBattleAilment, u8),
    OneHitKnockout,
    Heal(u8),
    Drain(u8),
    Recoil(u8),
    Flinch(u8),
    ChangeWeather(Weather),
    DispelWeather,
    ForceTargetSwitch,
    ForceUserSwitch,
    MultiHit(u8, u8),
    MultiTurn(u8, u8),
    Custom
}

#[derive(Debug)]
pub struct MoveData {
    id: u16,
    pp: u8,
    priority: i8,
    accuracy: Accuracy,
    _type: Type,
    contest_type: ContestType,
    damage_type: DamageType,
    target: Target,
    effects: &'static[Effect]
}

//region MoveConstants
impl Move {
    fn data(&self) -> MoveData {
        match self {
            Move::Pound => MoveData::Pound,
            Move::KarateChop => MoveData::KarateChop,
            Move::DoubleSlap => MoveData::DoubleSlap,
            Move::CometPunch => MoveData::CometPunch,
            Move::MegaPunch => MoveData::MegaPunch,
            Move::PayDay => MoveData::PayDay,
            Move::FirePunch => MoveData::FirePunch,
            Move::IcePunch => MoveData::IcePunch,
            Move::ThunderPunch => MoveData::ThunderPunch,
            Move::Scratch => MoveData::Scratch,
            Move::ViseGrip => MoveData::ViseGrip,
            Move::Guillotine => MoveData::Guillotine,
            Move::RazorWind => MoveData::RazorWind,
            Move::SwordsDance => MoveData::SwordsDance,
            Move::Cut => MoveData::Cut,
            Move::Gust => MoveData::Gust,
            Move::WingAttack => MoveData::WingAttack,
            Move::Whirlwind => MoveData::Whirlwind,
            Move::Fly => MoveData::Fly,
            Move::Bind => MoveData::Bind,
            Move::Slam => MoveData::Slam,
            Move::VineWhip => MoveData::VineWhip,
            Move::Stomp => MoveData::Stomp,
            Move::DoubleKick => MoveData::DoubleKick,
            Move::MegaKick => MoveData::MegaKick,
            Move::JumpKick => MoveData::JumpKick,
            Move::RollingKick => MoveData::RollingKick,
            Move::SandAttack => MoveData::SandAttack,
            Move::Headbutt => MoveData::Headbutt,
            Move::HornAttack => MoveData::HornAttack,
            Move::FuryAttack => MoveData::FuryAttack,
            Move::HornDrill => MoveData::HornDrill,
            Move::Tackle => MoveData::Tackle,
            Move::BodySlam => MoveData::BodySlam,
            Move::Wrap => MoveData::Wrap,
            Move::TakeDown => MoveData::TakeDown,
            Move::Thrash => MoveData::Thrash,
            Move::DoubleEdge => MoveData::DoubleEdge,
            Move::TailWhip => MoveData::TailWhip,
            Move::PoisonSting => MoveData::PoisonSting,
            Move::Twineedle => MoveData::Twineedle,
            Move::PinMissile => MoveData::PinMissile,
            Move::Leer => MoveData::Leer,
            Move::Bite => MoveData::Bite,
            Move::Growl => MoveData::Growl,
            Move::Roar => MoveData::Roar,
            Move::Sing => MoveData::Sing,
            Move::Supersonic => MoveData::Supersonic,
            Move::SonicBoom => MoveData::SonicBoom,
            Move::Disable => MoveData::Disable,
            Move::Acid => MoveData::Acid,
            Move::Ember => MoveData::Ember,
            Move::Flamethrower => MoveData::Flamethrower,
            Move::Mist => MoveData::Mist,
            Move::WaterGun => MoveData::WaterGun,
            Move::HydroPump => MoveData::HydroPump,
            Move::Surf => MoveData::Surf,
            Move::IceBeam => MoveData::IceBeam,
            Move::Blizzard => MoveData::Blizzard,
            Move::Psybeam => MoveData::Psybeam,
            Move::BubbleBeam => MoveData::BubbleBeam,
            Move::AuroraBeam => MoveData::AuroraBeam,
            Move::HyperBeam => MoveData::HyperBeam,
            Move::Peck => MoveData::Peck,
            Move::DrillPeck => MoveData::DrillPeck,
            Move::Submission => MoveData::Submission,
            Move::LowKick => MoveData::LowKick,
            Move::Counter => MoveData::Counter,
            Move::SeismicToss => MoveData::SeismicToss,
            Move::Strength => MoveData::Strength,
            Move::Absorb => MoveData::Absorb,
            Move::MegaDrain => MoveData::MegaDrain,
            Move::LeechSeed => MoveData::LeechSeed,
            Move::Growth => MoveData::Growth,
            Move::RazorLeaf => MoveData::RazorLeaf,
            Move::SolarBeam => MoveData::SolarBeam,
            Move::PoisonPowder => MoveData::PoisonPowder,
            Move::StunSpore => MoveData::StunSpore,
            Move::SleepPowder => MoveData::SleepPowder,
            Move::PetalDance => MoveData::PetalDance,
            Move::StringShot => MoveData::StringShot,
            Move::DragonRage => MoveData::DragonRage,
            Move::FireSpin => MoveData::FireSpin,
            Move::ThunderShock => MoveData::ThunderShock,
            Move::Thunderbolt => MoveData::Thunderbolt,
            Move::ThunderWave => MoveData::ThunderWave,
            Move::Thunder => MoveData::Thunder,
            Move::RockThrow => MoveData::RockThrow,
            Move::Earthquake => MoveData::Earthquake,
            Move::Fissure => MoveData::Fissure,
            Move::Dig => MoveData::Dig,
            Move::Toxic => MoveData::Toxic,
            Move::Confusion => MoveData::Confusion,
            Move::Psychic => MoveData::Psychic,
            Move::Hypnosis => MoveData::Hypnosis,
            Move::Meditate => MoveData::Meditate,
            Move::Agility => MoveData::Agility,
            Move::QuickAttack => MoveData::QuickAttack,
            Move::Rage => MoveData::Rage,
            Move::Teleport => MoveData::Teleport,
            Move::NightShade => MoveData::NightShade,
            Move::Mimic => MoveData::Mimic,
            Move::Screech => MoveData::Screech,
            Move::DoubleTeam => MoveData::DoubleTeam,
            Move::Recover => MoveData::Recover,
            Move::Harden => MoveData::Harden,
            Move::Minimize => MoveData::Minimize,
            Move::Smokescreen => MoveData::Smokescreen,
            Move::ConfuseRay => MoveData::ConfuseRay,
            Move::Withdraw => MoveData::Withdraw,
            Move::DefenseCurl => MoveData::DefenseCurl,
            Move::Barrier => MoveData::Barrier,
            Move::LightScreen => MoveData::LightScreen,
            Move::Haze => MoveData::Haze,
            Move::Reflect => MoveData::Reflect,
            Move::FocusEnergy => MoveData::FocusEnergy,
            Move::Bide => MoveData::Bide,
            Move::Metronome => MoveData::Metronome,
            Move::MirrorMove => MoveData::MirrorMove,
            Move::SelfDestruct => MoveData::SelfDestruct,
            Move::EggBomb => MoveData::EggBomb,
            Move::Lick => MoveData::Lick,
            Move::Smog => MoveData::Smog,
            Move::Sludge => MoveData::Sludge,
            Move::BoneClub => MoveData::BoneClub,
            Move::FireBlast => MoveData::FireBlast,
            Move::Waterfall => MoveData::Waterfall,
            Move::Clamp => MoveData::Clamp,
            Move::Swift => MoveData::Swift,
            Move::SkullBash => MoveData::SkullBash,
            Move::SpikeCannon => MoveData::SpikeCannon,
            Move::Constrict => MoveData::Constrict,
            Move::Amnesia => MoveData::Amnesia,
            Move::Kinesis => MoveData::Kinesis,
            Move::SoftBoiled => MoveData::SoftBoiled,
            Move::HighJumpKick => MoveData::HighJumpKick,
            Move::Glare => MoveData::Glare,
            Move::DreamEater => MoveData::DreamEater,
            Move::PoisonGas => MoveData::PoisonGas,
            Move::Barrage => MoveData::Barrage,
            Move::LeechLife => MoveData::LeechLife,
            Move::LovelyKiss => MoveData::LovelyKiss,
            Move::SkyAttack => MoveData::SkyAttack,
            Move::Transform => MoveData::Transform,
            Move::Bubble => MoveData::Bubble,
            Move::DizzyPunch => MoveData::DizzyPunch,
            Move::Spore => MoveData::Spore,
            Move::Flash => MoveData::Flash,
            Move::Psywave => MoveData::Psywave,
            Move::Splash => MoveData::Splash,
            Move::AcidArmor => MoveData::AcidArmor,
            Move::Crabhammer => MoveData::Crabhammer,
            Move::Explosion => MoveData::Explosion,
            Move::FurySwipes => MoveData::FurySwipes,
            Move::Bonemerang => MoveData::Bonemerang,
            Move::Rest => MoveData::Rest,
            Move::RockSlide => MoveData::RockSlide,
            Move::HyperFang => MoveData::HyperFang,
            Move::Sharpen => MoveData::Sharpen,
            Move::Conversion => MoveData::Conversion,
            Move::TriAttack => MoveData::TriAttack,
            Move::SuperFang => MoveData::SuperFang,
            Move::Slash => MoveData::Slash,
            Move::Substitute => MoveData::Substitute,
            Move::Struggle => MoveData::Struggle,
            Move::Sketch => MoveData::Sketch,
            Move::TripleKick => MoveData::TripleKick,
            Move::Thief => MoveData::Thief,
            Move::SpiderWeb => MoveData::SpiderWeb,
            Move::MindReader => MoveData::MindReader,
            Move::Nightmare => MoveData::Nightmare,
            Move::FlameWheel => MoveData::FlameWheel,
            Move::Snore => MoveData::Snore,
            Move::Curse => MoveData::Curse,
            Move::Flail => MoveData::Flail,
            Move::Conversion2 => MoveData::Conversion2,
            Move::Aeroblast => MoveData::Aeroblast,
            Move::CottonSpore => MoveData::CottonSpore,
            Move::Reversal => MoveData::Reversal,
            Move::Spite => MoveData::Spite,
            Move::PowderSnow => MoveData::PowderSnow,
            Move::Protect => MoveData::Protect,
            Move::MachPunch => MoveData::MachPunch,
            Move::ScaryFace => MoveData::ScaryFace,
            Move::FeintAttack => MoveData::FeintAttack,
            Move::SweetKiss => MoveData::SweetKiss,
            Move::BellyDrum => MoveData::BellyDrum,
            Move::SludgeBomb => MoveData::SludgeBomb,
            Move::MudSlap => MoveData::MudSlap,
            Move::Octazooka => MoveData::Octazooka,
            Move::Spikes => MoveData::Spikes,
            Move::ZapCannon => MoveData::ZapCannon,
            Move::Foresight => MoveData::Foresight,
            Move::DestinyBond => MoveData::DestinyBond,
            Move::PerishSong => MoveData::PerishSong,
            Move::IcyWind => MoveData::IcyWind,
            Move::Detect => MoveData::Detect,
            Move::BoneRush => MoveData::BoneRush,
            Move::LockOn => MoveData::LockOn,
            Move::Outrage => MoveData::Outrage,
            Move::Sandstorm => MoveData::Sandstorm,
            Move::GigaDrain => MoveData::GigaDrain,
            Move::Endure => MoveData::Endure,
            Move::Charm => MoveData::Charm,
            Move::Rollout => MoveData::Rollout,
            Move::FalseSwipe => MoveData::FalseSwipe,
            Move::Swagger => MoveData::Swagger,
            Move::MilkDrink => MoveData::MilkDrink,
            Move::Spark => MoveData::Spark,
            Move::FuryCutter => MoveData::FuryCutter,
            Move::SteelWing => MoveData::SteelWing,
            Move::MeanLook => MoveData::MeanLook,
            Move::Attract => MoveData::Attract,
            Move::SleepTalk => MoveData::SleepTalk,
            Move::HealBell => MoveData::HealBell,
            Move::Return => MoveData::Return,
            Move::Present => MoveData::Present,
            Move::Frustration => MoveData::Frustration,
            Move::Safeguard => MoveData::Safeguard,
            Move::PainSplit => MoveData::PainSplit,
            Move::SacredFire => MoveData::SacredFire,
            Move::Magnitude => MoveData::Magnitude,
            Move::DynamicPunch => MoveData::DynamicPunch,
            Move::Megahorn => MoveData::Megahorn,
            Move::DragonBreath => MoveData::DragonBreath,
            Move::BatonPass => MoveData::BatonPass,
            Move::Encore => MoveData::Encore,
            Move::Pursuit => MoveData::Pursuit,
            Move::RapidSpin => MoveData::RapidSpin,
            Move::SweetScent => MoveData::SweetScent,
            Move::IronTail => MoveData::IronTail,
            Move::MetalClaw => MoveData::MetalClaw,
            Move::VitalThrow => MoveData::VitalThrow,
            Move::MorningSun => MoveData::MorningSun,
            Move::Synthesis => MoveData::Synthesis,
            Move::Moonlight => MoveData::Moonlight,
            Move::HiddenPower => MoveData::HiddenPower,
            Move::CrossChop => MoveData::CrossChop,
            Move::Twister => MoveData::Twister,
            Move::RainDance => MoveData::RainDance,
            Move::SunnyDay => MoveData::SunnyDay,
            Move::Crunch => MoveData::Crunch,
            Move::MirrorCoat => MoveData::MirrorCoat,
            Move::PsychUp => MoveData::PsychUp,
            Move::ExtremeSpeed => MoveData::ExtremeSpeed,
            Move::AncientPower => MoveData::AncientPower,
            Move::ShadowBall => MoveData::ShadowBall,
            Move::FutureSight => MoveData::FutureSight,
            Move::RockSmash => MoveData::RockSmash,
            Move::Whirlpool => MoveData::Whirlpool,
            Move::BeatUp => MoveData::BeatUp,
            Move::FakeOut => MoveData::FakeOut,
            Move::Uproar => MoveData::Uproar,
            Move::Stockpile => MoveData::Stockpile,
            Move::SpitUp => MoveData::SpitUp,
            Move::Swallow => MoveData::Swallow,
            Move::HeatWave => MoveData::HeatWave,
            Move::Hail => MoveData::Hail,
            Move::Torment => MoveData::Torment,
            Move::Flatter => MoveData::Flatter,
            Move::WillOWisp => MoveData::WillOWisp,
            Move::Memento => MoveData::Memento,
            Move::Facade => MoveData::Facade,
            Move::FocusPunch => MoveData::FocusPunch,
            Move::SmellingSalts => MoveData::SmellingSalts,
            Move::FollowMe => MoveData::FollowMe,
            Move::NaturePower => MoveData::NaturePower,
            Move::Charge => MoveData::Charge,
            Move::Taunt => MoveData::Taunt,
            Move::HelpingHand => MoveData::HelpingHand,
            Move::Trick => MoveData::Trick,
            Move::RolePlay => MoveData::RolePlay,
            Move::Wish => MoveData::Wish,
            Move::Assist => MoveData::Assist,
            Move::Ingrain => MoveData::Ingrain,
            Move::Superpower => MoveData::Superpower,
            Move::MagicCoat => MoveData::MagicCoat,
            Move::Recycle => MoveData::Recycle,
            Move::Revenge => MoveData::Revenge,
            Move::BrickBreak => MoveData::BrickBreak,
            Move::Yawn => MoveData::Yawn,
            Move::KnockOff => MoveData::KnockOff,
            Move::Endeavor => MoveData::Endeavor,
            Move::Eruption => MoveData::Eruption,
            Move::SkillSwap => MoveData::SkillSwap,
            Move::Imprison => MoveData::Imprison,
            Move::Refresh => MoveData::Refresh,
            Move::Grudge => MoveData::Grudge,
            Move::Snatch => MoveData::Snatch,
            Move::SecretPower => MoveData::SecretPower,
            Move::Dive => MoveData::Dive,
            Move::ArmThrust => MoveData::ArmThrust,
            Move::Camouflage => MoveData::Camouflage,
            Move::TailGlow => MoveData::TailGlow,
            Move::LusterPurge => MoveData::LusterPurge,
            Move::MistBall => MoveData::MistBall,
            Move::FeatherDance => MoveData::FeatherDance,
            Move::TeeterDance => MoveData::TeeterDance,
            Move::BlazeKick => MoveData::BlazeKick,
            Move::MudSport => MoveData::MudSport,
            Move::IceBall => MoveData::IceBall,
            Move::NeedleArm => MoveData::NeedleArm,
            Move::SlackOff => MoveData::SlackOff,
            Move::HyperVoice => MoveData::HyperVoice,
            Move::PoisonFang => MoveData::PoisonFang,
            Move::CrushClaw => MoveData::CrushClaw,
            Move::BlastBurn => MoveData::BlastBurn,
            Move::HydroCannon => MoveData::HydroCannon,
            Move::MeteorMash => MoveData::MeteorMash,
            Move::Astonish => MoveData::Astonish,
            Move::WeatherBall => MoveData::WeatherBall,
            Move::Aromatherapy => MoveData::Aromatherapy,
            Move::FakeTears => MoveData::FakeTears,
            Move::AirCutter => MoveData::AirCutter,
            Move::Overheat => MoveData::Overheat,
            Move::OdorSleuth => MoveData::OdorSleuth,
            Move::RockTomb => MoveData::RockTomb,
            Move::SilverWind => MoveData::SilverWind,
            Move::MetalSound => MoveData::MetalSound,
            Move::GrassWhistle => MoveData::GrassWhistle,
            Move::Tickle => MoveData::Tickle,
            Move::CosmicPower => MoveData::CosmicPower,
            Move::WaterSpout => MoveData::WaterSpout,
            Move::SignalBeam => MoveData::SignalBeam,
            Move::ShadowPunch => MoveData::ShadowPunch,
            Move::Extrasensory => MoveData::Extrasensory,
            Move::SkyUppercut => MoveData::SkyUppercut,
            Move::SandTomb => MoveData::SandTomb,
            Move::SheerCold => MoveData::SheerCold,
            Move::MuddyWater => MoveData::MuddyWater,
            Move::BulletSeed => MoveData::BulletSeed,
            Move::AerialAce => MoveData::AerialAce,
            Move::IcicleSpear => MoveData::IcicleSpear,
            Move::IronDefense => MoveData::IronDefense,
            Move::Block => MoveData::Block,
            Move::Howl => MoveData::Howl,
            Move::DragonClaw => MoveData::DragonClaw,
            Move::FrenzyPlant => MoveData::FrenzyPlant,
            Move::BulkUp => MoveData::BulkUp,
            Move::Bounce => MoveData::Bounce,
            Move::MudShot => MoveData::MudShot,
            Move::PoisonTail => MoveData::PoisonTail,
            Move::Covet => MoveData::Covet,
            Move::VoltTackle => MoveData::VoltTackle,
            Move::MagicalLeaf => MoveData::MagicalLeaf,
            Move::WaterSport => MoveData::WaterSport,
            Move::CalmMind => MoveData::CalmMind,
            Move::LeafBlade => MoveData::LeafBlade,
            Move::DragonDance => MoveData::DragonDance,
            Move::RockBlast => MoveData::RockBlast,
            Move::ShockWave => MoveData::ShockWave,
            Move::WaterPulse => MoveData::WaterPulse,
            Move::DoomDesire => MoveData::DoomDesire,
            Move::PsychoBoost => MoveData::PsychoBoost,
            Move::Roost => MoveData::Roost,
            Move::Gravity => MoveData::Gravity,
            Move::MiracleEye => MoveData::MiracleEye,
            Move::WakeUpSlap => MoveData::WakeUpSlap,
            Move::HammerArm => MoveData::HammerArm,
            Move::GyroBall => MoveData::GyroBall,
            Move::HealingWish => MoveData::HealingWish,
            Move::Brine => MoveData::Brine,
            Move::NaturalGift => MoveData::NaturalGift,
            Move::Feint => MoveData::Feint,
            Move::Pluck => MoveData::Pluck,
            Move::Tailwind => MoveData::Tailwind,
            Move::Acupressure => MoveData::Acupressure,
            Move::MetalBurst => MoveData::MetalBurst,
            Move::UTurn => MoveData::UTurn,
            Move::CloseCombat => MoveData::CloseCombat,
            Move::Payback => MoveData::Payback,
            Move::Assurance => MoveData::Assurance,
            Move::Embargo => MoveData::Embargo,
            Move::Fling => MoveData::Fling,
            Move::PsychoShift => MoveData::PsychoShift,
            Move::TrumpCard => MoveData::TrumpCard,
            Move::HealBlock => MoveData::HealBlock,
            Move::WringOut => MoveData::WringOut,
            Move::PowerTrick => MoveData::PowerTrick,
            Move::GastroAcid => MoveData::GastroAcid,
            Move::LuckyChant => MoveData::LuckyChant,
            Move::MeFirst => MoveData::MeFirst,
            Move::Copycat => MoveData::Copycat,
            Move::PowerSwap => MoveData::PowerSwap,
            Move::GuardSwap => MoveData::GuardSwap,
            Move::Punishment => MoveData::Punishment,
            Move::LastResort => MoveData::LastResort,
            Move::WorrySeed => MoveData::WorrySeed,
            Move::SuckerPunch => MoveData::SuckerPunch,
            Move::ToxicSpikes => MoveData::ToxicSpikes,
            Move::HeartSwap => MoveData::HeartSwap,
            Move::AquaRing => MoveData::AquaRing,
            Move::MagnetRise => MoveData::MagnetRise,
            Move::FlareBlitz => MoveData::FlareBlitz,
            Move::ForcePalm => MoveData::ForcePalm,
            Move::AuraSphere => MoveData::AuraSphere,
            Move::RockPolish => MoveData::RockPolish,
            Move::PoisonJab => MoveData::PoisonJab,
            Move::DarkPulse => MoveData::DarkPulse,
            Move::NightSlash => MoveData::NightSlash,
            Move::AquaTail => MoveData::AquaTail,
            Move::SeedBomb => MoveData::SeedBomb,
            Move::AirSlash => MoveData::AirSlash,
            Move::XScissor => MoveData::XScissor,
            Move::BugBuzz => MoveData::BugBuzz,
            Move::DragonPulse => MoveData::DragonPulse,
            Move::DragonRush => MoveData::DragonRush,
            Move::PowerGem => MoveData::PowerGem,
            Move::DrainPunch => MoveData::DrainPunch,
            Move::VacuumWave => MoveData::VacuumWave,
            Move::FocusBlast => MoveData::FocusBlast,
            Move::EnergyBall => MoveData::EnergyBall,
            Move::BraveBird => MoveData::BraveBird,
            Move::EarthPower => MoveData::EarthPower,
            Move::Switcheroo => MoveData::Switcheroo,
            Move::GigaImpact => MoveData::GigaImpact,
            Move::NastyPlot => MoveData::NastyPlot,
            Move::BulletPunch => MoveData::BulletPunch,
            Move::Avalanche => MoveData::Avalanche,
            Move::IceShard => MoveData::IceShard,
            Move::ShadowClaw => MoveData::ShadowClaw,
            Move::ThunderFang => MoveData::ThunderFang,
            Move::IceFang => MoveData::IceFang,
            Move::FireFang => MoveData::FireFang,
            Move::ShadowSneak => MoveData::ShadowSneak,
            Move::MudBomb => MoveData::MudBomb,
            Move::PsychoCut => MoveData::PsychoCut,
            Move::ZenHeadbutt => MoveData::ZenHeadbutt,
            Move::MirrorShot => MoveData::MirrorShot,
            Move::FlashCannon => MoveData::FlashCannon,
            Move::RockClimb => MoveData::RockClimb,
            Move::Defog => MoveData::Defog,
            Move::TrickRoom => MoveData::TrickRoom,
            Move::DracoMeteor => MoveData::DracoMeteor,
            Move::Discharge => MoveData::Discharge,
            Move::LavaPlume => MoveData::LavaPlume,
            Move::LeafStorm => MoveData::LeafStorm,
            Move::PowerWhip => MoveData::PowerWhip,
            Move::RockWrecker => MoveData::RockWrecker,
            Move::CrossPoison => MoveData::CrossPoison,
            Move::GunkShot => MoveData::GunkShot,
            Move::IronHead => MoveData::IronHead,
            Move::MagnetBomb => MoveData::MagnetBomb,
            Move::StoneEdge => MoveData::StoneEdge,
            Move::Captivate => MoveData::Captivate,
            Move::StealthRock => MoveData::StealthRock,
            Move::GrassKnot => MoveData::GrassKnot,
            Move::Chatter => MoveData::Chatter,
            Move::Judgment => MoveData::Judgment,
            Move::BugBite => MoveData::BugBite,
            Move::ChargeBeam => MoveData::ChargeBeam,
            Move::WoodHammer => MoveData::WoodHammer,
            Move::AquaJet => MoveData::AquaJet,
            Move::AttackOrder => MoveData::AttackOrder,
            Move::DefendOrder => MoveData::DefendOrder,
            Move::HealOrder => MoveData::HealOrder,
            Move::HeadSmash => MoveData::HeadSmash,
            Move::DoubleHit => MoveData::DoubleHit,
            Move::RoarOfTime => MoveData::RoarOfTime,
            Move::SpacialRend => MoveData::SpacialRend,
            Move::LunarDance => MoveData::LunarDance,
            Move::CrushGrip => MoveData::CrushGrip,
            Move::MagmaStorm => MoveData::MagmaStorm,
            Move::DarkVoid => MoveData::DarkVoid,
            Move::SeedFlare => MoveData::SeedFlare,
            Move::OminousWind => MoveData::OminousWind,
            Move::ShadowForce => MoveData::ShadowForce,
            Move::HoneClaws => MoveData::HoneClaws,
            Move::WideGuard => MoveData::WideGuard,
            Move::GuardSplit => MoveData::GuardSplit,
            Move::PowerSplit => MoveData::PowerSplit,
            Move::WonderRoom => MoveData::WonderRoom,
            Move::Psyshock => MoveData::Psyshock,
            Move::Venoshock => MoveData::Venoshock,
            Move::Autotomize => MoveData::Autotomize,
            Move::RagePowder => MoveData::RagePowder,
            Move::Telekinesis => MoveData::Telekinesis,
            Move::MagicRoom => MoveData::MagicRoom,
            Move::SmackDown => MoveData::SmackDown,
            Move::StormThrow => MoveData::StormThrow,
            Move::FlameBurst => MoveData::FlameBurst,
            Move::SludgeWave => MoveData::SludgeWave,
            Move::QuiverDance => MoveData::QuiverDance,
            Move::HeavySlam => MoveData::HeavySlam,
            Move::Synchronoise => MoveData::Synchronoise,
            Move::ElectroBall => MoveData::ElectroBall,
            Move::Soak => MoveData::Soak,
            Move::FlameCharge => MoveData::FlameCharge,
            Move::Coil => MoveData::Coil,
            Move::LowSweep => MoveData::LowSweep,
            Move::AcidSpray => MoveData::AcidSpray,
            Move::FoulPlay => MoveData::FoulPlay,
            Move::SimpleBeam => MoveData::SimpleBeam,
            Move::Entrainment => MoveData::Entrainment,
            Move::AfterYou => MoveData::AfterYou,
            Move::Round => MoveData::Round,
            Move::EchoedVoice => MoveData::EchoedVoice,
            Move::ChipAway => MoveData::ChipAway,
            Move::ClearSmog => MoveData::ClearSmog,
            Move::StoredPower => MoveData::StoredPower,
            Move::QuickGuard => MoveData::QuickGuard,
            Move::AllySwitch => MoveData::AllySwitch,
            Move::Scald => MoveData::Scald,
            Move::ShellSmash => MoveData::ShellSmash,
            Move::HealPulse => MoveData::HealPulse,
            Move::Hex => MoveData::Hex,
            Move::SkyDrop => MoveData::SkyDrop,
            Move::ShiftGear => MoveData::ShiftGear,
            Move::CircleThrow => MoveData::CircleThrow,
            Move::Incinerate => MoveData::Incinerate,
            Move::Quash => MoveData::Quash,
            Move::Acrobatics => MoveData::Acrobatics,
            Move::ReflectType => MoveData::ReflectType,
            Move::Retaliate => MoveData::Retaliate,
            Move::FinalGambit => MoveData::FinalGambit,
            Move::Bestow => MoveData::Bestow,
            Move::Inferno => MoveData::Inferno,
            Move::WaterPledge => MoveData::WaterPledge,
            Move::FirePledge => MoveData::FirePledge,
            Move::GrassPledge => MoveData::GrassPledge,
            Move::VoltSwitch => MoveData::VoltSwitch,
            Move::StruggleBug => MoveData::StruggleBug,
            Move::Bulldoze => MoveData::Bulldoze,
            Move::FrostBreath => MoveData::FrostBreath,
            Move::DragonTail => MoveData::DragonTail,
            Move::WorkUp => MoveData::WorkUp,
            Move::Electroweb => MoveData::Electroweb,
            Move::WildCharge => MoveData::WildCharge,
            Move::DrillRun => MoveData::DrillRun,
            Move::DualChop => MoveData::DualChop,
            Move::HeartStamp => MoveData::HeartStamp,
            Move::HornLeech => MoveData::HornLeech,
            Move::SacredSword => MoveData::SacredSword,
            Move::RazorShell => MoveData::RazorShell,
            Move::HeatCrash => MoveData::HeatCrash,
            Move::LeafTornado => MoveData::LeafTornado,
            Move::Steamroller => MoveData::Steamroller,
            Move::CottonGuard => MoveData::CottonGuard,
            Move::NightDaze => MoveData::NightDaze,
            Move::Psystrike => MoveData::Psystrike,
            Move::TailSlap => MoveData::TailSlap,
            Move::Hurricane => MoveData::Hurricane,
            Move::HeadCharge => MoveData::HeadCharge,
            Move::GearGrind => MoveData::GearGrind,
            Move::SearingShot => MoveData::SearingShot,
            Move::TechnoBlast => MoveData::TechnoBlast,
            Move::RelicSong => MoveData::RelicSong,
            Move::SecretSword => MoveData::SecretSword,
            Move::Glaciate => MoveData::Glaciate,
            Move::BoltStrike => MoveData::BoltStrike,
            Move::BlueFlare => MoveData::BlueFlare,
            Move::FieryDance => MoveData::FieryDance,
            Move::FreezeShock => MoveData::FreezeShock,
            Move::IceBurn => MoveData::IceBurn,
            Move::Snarl => MoveData::Snarl,
            Move::IcicleCrash => MoveData::IcicleCrash,
            Move::VCreate => MoveData::VCreate,
            Move::FusionFlare => MoveData::FusionFlare,
            Move::FusionBolt => MoveData::FusionBolt,
        }
    }
}

#[allow(non_upper_case_globals)]
impl MoveData {
    pub const Pound: MoveData = MoveData {
        id: 1,
        pp: 35,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const KarateChop: MoveData = MoveData {
        id: 2,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50), Effect::Critical(1)],
    };
    pub const DoubleSlap: MoveData = MoveData {
        id: 3,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(15), Effect::MultiHit(2, 5)],
    };
    pub const CometPunch: MoveData = MoveData {
        id: 4,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(18), Effect::MultiHit(2, 5)],
    };
    pub const MegaPunch: MoveData = MoveData {
        id: 5,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const PayDay: MoveData = MoveData {
        id: 6,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const FirePunch: MoveData = MoveData {
        id: 7,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(75), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 10)],
    };
    pub const IcePunch: MoveData = MoveData {
        id: 8,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ice,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(75), Effect::NonVolatileStatus(NonVolatileBattleAilment::Freeze, 10)],
    };
    pub const ThunderPunch: MoveData = MoveData {
        id: 9,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Electric,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(75), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 10)],
    };
    pub const Scratch: MoveData = MoveData {
        id: 10,
        pp: 35,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const ViseGrip: MoveData = MoveData {
        id: 11,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(55)],
    };
    pub const Guillotine: MoveData = MoveData {
        id: 12,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(30),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::OneHitKnockout],
    };
    pub const RazorWind: MoveData = MoveData {
        id: 13,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(80), Effect::Critical(1)],
    };
    pub const SwordsDance: MoveData = MoveData {
        id: 14,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Attack, 2, 100, StatChangeTarget::User)],
    };
    pub const Cut: MoveData = MoveData {
        id: 15,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50)],
    };
    pub const Gust: MoveData = MoveData {
        id: 16,
        pp: 35,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Flying,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const WingAttack: MoveData = MoveData {
        id: 17,
        pp: 35,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Flying,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const Whirlwind: MoveData = MoveData {
        id: 18,
        pp: 20,
        priority: -6,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::ForceTargetSwitch],
    };
    pub const Fly: MoveData = MoveData {
        id: 19,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Flying,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90)],
    };
    pub const Bind: MoveData = MoveData {
        id: 20,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(15), Effect::Custom],
    };
    pub const Slam: MoveData = MoveData {
        id: 21,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(75),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const VineWhip: MoveData = MoveData {
        id: 22,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(45)],
    };
    pub const Stomp: MoveData = MoveData {
        id: 23,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::Flinch(30)],
    };
    pub const DoubleKick: MoveData = MoveData {
        id: 24,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(30), Effect::MultiHit(2, 2)],
    };
    pub const MegaKick: MoveData = MoveData {
        id: 25,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(75),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120)],
    };
    pub const JumpKick: MoveData = MoveData {
        id: 26,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100)],
    };
    pub const RollingKick: MoveData = MoveData {
        id: 27,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::Flinch(30)],
    };
    pub const SandAttack: MoveData = MoveData {
        id: 28,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ground,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::StatChange(BattleStat::Accuracy, -1, 100, StatChangeTarget::Target)],
    };
    pub const Headbutt: MoveData = MoveData {
        id: 29,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70), Effect::Flinch(30)],
    };
    pub const HornAttack: MoveData = MoveData {
        id: 30,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65)],
    };
    pub const FuryAttack: MoveData = MoveData {
        id: 31,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(15), Effect::MultiHit(2, 5)],
    };
    pub const HornDrill: MoveData = MoveData {
        id: 32,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(30),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::OneHitKnockout],
    };
    pub const Tackle: MoveData = MoveData {
        id: 33,
        pp: 35,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const BodySlam: MoveData = MoveData {
        id: 34,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(85), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 30)],
    };
    pub const Wrap: MoveData = MoveData {
        id: 35,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(15), Effect::Custom],
    };
    pub const TakeDown: MoveData = MoveData {
        id: 36,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90), Effect::Recoil(25)],
    };
    pub const Thrash: MoveData = MoveData {
        id: 37,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::RandomOpponent,
        effects: &[Effect::Damage(120)],
    };
    pub const DoubleEdge: MoveData = MoveData {
        id: 38,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120), Effect::Recoil(33)],
    };
    pub const TailWhip: MoveData = MoveData {
        id: 39,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[Effect::StatChange(BattleStat::Defense, -1, 100, StatChangeTarget::Target)],
    };
    pub const PoisonSting: MoveData = MoveData {
        id: 40,
        pp: 35,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Poison,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(15), Effect::NonVolatileStatus(NonVolatileBattleAilment::Poison(false), 30)],
    };
    pub const Twineedle: MoveData = MoveData {
        id: 41,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Bug,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(25), Effect::MultiHit(2, 2), Effect::NonVolatileStatus(NonVolatileBattleAilment::Poison(false), 20)],
    };
    pub const PinMissile: MoveData = MoveData {
        id: 42,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Bug,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(25), Effect::MultiHit(2, 5)],
    };
    pub const Leer: MoveData = MoveData {
        id: 43,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[Effect::StatChange(BattleStat::Defense, -1, 100, StatChangeTarget::Target)],
    };
    pub const Bite: MoveData = MoveData {
        id: 44,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::Flinch(30)],
    };
    pub const Growl: MoveData = MoveData {
        id: 45,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[Effect::StatChange(BattleStat::Attack, -1, 100, StatChangeTarget::Target)],
    };
    pub const Roar: MoveData = MoveData {
        id: 46,
        pp: 20,
        priority: -6,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::ForceTargetSwitch],
    };
    pub const Sing: MoveData = MoveData {
        id: 47,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(55),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::NonVolatileStatus(NonVolatileBattleAilment::Sleep, 0)],
    };
    pub const Supersonic: MoveData = MoveData {
        id: 48,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(55),
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::VolatileStatus(VolatileBattleAilment::Confusion, 0)],
    };
    pub const SonicBoom: MoveData = MoveData {
        id: 49,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Disable: MoveData = MoveData {
        id: 50,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Custom],
    };
    pub const Acid: MoveData = MoveData {
        id: 51,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Poison,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(40), Effect::StatChange(BattleStat::SpecialDefense, -1, 10, StatChangeTarget::Target)],
    };
    pub const Ember: MoveData = MoveData {
        id: 52,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 10)],
    };
    pub const Flamethrower: MoveData = MoveData {
        id: 53,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 10)],
    };
    pub const Mist: MoveData = MoveData {
        id: 54,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Ice,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::UserAndAlly,
        effects: &[],
    };
    pub const WaterGun: MoveData = MoveData {
        id: 55,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Water,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const HydroPump: MoveData = MoveData {
        id: 56,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(80),
        _type: Type::Water,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(110)],
    };
    pub const Surf: MoveData = MoveData {
        id: 57,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Water,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllExceptUser,
        effects: &[Effect::Damage(90)],
    };
    pub const IceBeam: MoveData = MoveData {
        id: 58,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ice,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90), Effect::NonVolatileStatus(NonVolatileBattleAilment::Freeze, 10)],
    };
    pub const Blizzard: MoveData = MoveData {
        id: 59,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(70),
        _type: Type::Ice,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(110), Effect::NonVolatileStatus(NonVolatileBattleAilment::Freeze, 10)],
    };
    pub const Psybeam: MoveData = MoveData {
        id: 60,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::VolatileStatus(VolatileBattleAilment::Confusion, 10)],
    };
    pub const BubbleBeam: MoveData = MoveData {
        id: 61,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Water,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::StatChange(BattleStat::Speed, -1, 10, StatChangeTarget::Target)],
    };
    pub const AuroraBeam: MoveData = MoveData {
        id: 62,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ice,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::StatChange(BattleStat::Attack, -1, 10, StatChangeTarget::Target)],
    };
    pub const HyperBeam: MoveData = MoveData {
        id: 63,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(150)],
    };
    pub const Peck: MoveData = MoveData {
        id: 64,
        pp: 35,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Flying,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(35)],
    };
    pub const DrillPeck: MoveData = MoveData {
        id: 65,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Flying,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const Submission: MoveData = MoveData {
        id: 66,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(80),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::Recoil(25)],
    };
    pub const LowKick: MoveData = MoveData {
        id: 67,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Counter: MoveData = MoveData {
        id: 68,
        pp: 20,
        priority: -5,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::User,
        effects: &[],
    };
    pub const SeismicToss: MoveData = MoveData {
        id: 69,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Strength: MoveData = MoveData {
        id: 70,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const Absorb: MoveData = MoveData {
        id: 71,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(20), Effect::Drain(50)],
    };
    pub const MegaDrain: MoveData = MoveData {
        id: 72,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40), Effect::Drain(50)],
    };
    pub const LeechSeed: MoveData = MoveData {
        id: 73,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Grass,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Custom],
    };
    pub const Growth: MoveData = MoveData {
        id: 74,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Attack, 1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::SpecialAttack, 1, 100, StatChangeTarget::User)],
    };
    pub const RazorLeaf: MoveData = MoveData {
        id: 75,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Grass,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::Opponents,
        effects: &[Effect::Damage(55), Effect::Critical(1)],
    };
    pub const SolarBeam: MoveData = MoveData {
        id: 76,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120)],
    };
    pub const PoisonPowder: MoveData = MoveData {
        id: 77,
        pp: 35,
        priority: 0,
        accuracy: Accuracy::Percentage(75),
        _type: Type::Poison,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::NonVolatileStatus(NonVolatileBattleAilment::Poison(false), 0)],
    };
    pub const StunSpore: MoveData = MoveData {
        id: 78,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::Percentage(75),
        _type: Type::Grass,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 0)],
    };
    pub const SleepPowder: MoveData = MoveData {
        id: 79,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(75),
        _type: Type::Grass,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::NonVolatileStatus(NonVolatileBattleAilment::Sleep, 0)],
    };
    pub const PetalDance: MoveData = MoveData {
        id: 80,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::RandomOpponent,
        effects: &[Effect::Damage(120)],
    };
    pub const StringShot: MoveData = MoveData {
        id: 81,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Bug,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[Effect::StatChange(BattleStat::Speed, -2, 100, StatChangeTarget::Target)],
    };
    pub const DragonRage: MoveData = MoveData {
        id: 82,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dragon,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const FireSpin: MoveData = MoveData {
        id: 83,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(35), Effect::Custom],
    };
    pub const ThunderShock: MoveData = MoveData {
        id: 84,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Electric,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 10)],
    };
    pub const Thunderbolt: MoveData = MoveData {
        id: 85,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Electric,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 10)],
    };
    pub const ThunderWave: MoveData = MoveData {
        id: 86,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Electric,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 0)],
    };
    pub const Thunder: MoveData = MoveData {
        id: 87,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(70),
        _type: Type::Electric,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(110), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 30)],
    };
    pub const RockThrow: MoveData = MoveData {
        id: 88,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Rock,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50)],
    };
    pub const Earthquake: MoveData = MoveData {
        id: 89,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ground,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllExceptUser,
        effects: &[Effect::Damage(100)],
    };
    pub const Fissure: MoveData = MoveData {
        id: 90,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(30),
        _type: Type::Ground,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::OneHitKnockout],
    };
    pub const Dig: MoveData = MoveData {
        id: 91,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ground,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const Toxic: MoveData = MoveData {
        id: 92,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Poison,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::NonVolatileStatus(NonVolatileBattleAilment::Poison(true), 0)],
    };
    pub const Confusion: MoveData = MoveData {
        id: 93,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50), Effect::VolatileStatus(VolatileBattleAilment::Confusion, 10)],
    };
    pub const Psychic: MoveData = MoveData {
        id: 94,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90), Effect::StatChange(BattleStat::SpecialDefense, -1, 10, StatChangeTarget::Target)],
    };
    pub const Hypnosis: MoveData = MoveData {
        id: 95,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(60),
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::NonVolatileStatus(NonVolatileBattleAilment::Sleep, 0)],
    };
    pub const Meditate: MoveData = MoveData {
        id: 96,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Attack, 1, 100, StatChangeTarget::User)],
    };
    pub const Agility: MoveData = MoveData {
        id: 97,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Speed, 2, 100, StatChangeTarget::User)],
    };
    pub const QuickAttack: MoveData = MoveData {
        id: 98,
        pp: 30,
        priority: 1,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const Rage: MoveData = MoveData {
        id: 99,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(20)],
    };
    pub const Teleport: MoveData = MoveData {
        id: 100,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const NightShade: MoveData = MoveData {
        id: 101,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ghost,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Mimic: MoveData = MoveData {
        id: 102,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Screech: MoveData = MoveData {
        id: 103,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::StatChange(BattleStat::Defense, -2, 100, StatChangeTarget::Target)],
    };
    pub const DoubleTeam: MoveData = MoveData {
        id: 104,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Evasion, 1, 100, StatChangeTarget::User)],
    };
    pub const Recover: MoveData = MoveData {
        id: 105,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::Heal(50)],
    };
    pub const Harden: MoveData = MoveData {
        id: 106,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Defense, 1, 100, StatChangeTarget::User)],
    };
    pub const Minimize: MoveData = MoveData {
        id: 107,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Evasion, 2, 100, StatChangeTarget::User)],
    };
    pub const Smokescreen: MoveData = MoveData {
        id: 108,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::StatChange(BattleStat::Accuracy, -1, 100, StatChangeTarget::Target)],
    };
    pub const ConfuseRay: MoveData = MoveData {
        id: 109,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ghost,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::VolatileStatus(VolatileBattleAilment::Confusion, 0)],
    };
    pub const Withdraw: MoveData = MoveData {
        id: 110,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Water,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Defense, 1, 100, StatChangeTarget::User)],
    };
    pub const DefenseCurl: MoveData = MoveData {
        id: 111,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Defense, 1, 100, StatChangeTarget::User)],
    };
    pub const Barrier: MoveData = MoveData {
        id: 112,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Defense, 2, 100, StatChangeTarget::User)],
    };
    pub const LightScreen: MoveData = MoveData {
        id: 113,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::UserAndAlly,
        effects: &[],
    };
    pub const Haze: MoveData = MoveData {
        id: 114,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Ice,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[],
    };
    pub const Reflect: MoveData = MoveData {
        id: 115,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::UserAndAlly,
        effects: &[],
    };
    pub const FocusEnergy: MoveData = MoveData {
        id: 116,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Bide: MoveData = MoveData {
        id: 117,
        pp: 10,
        priority: 1,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::User,
        effects: &[],
    };
    pub const Metronome: MoveData = MoveData {
        id: 118,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const MirrorMove: MoveData = MoveData {
        id: 119,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Flying,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const SelfDestruct: MoveData = MoveData {
        id: 120,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllExceptUser,
        effects: &[Effect::Damage(200)],
    };
    pub const EggBomb: MoveData = MoveData {
        id: 121,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(75),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100)],
    };
    pub const Lick: MoveData = MoveData {
        id: 122,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ghost,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(30), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 30)],
    };
    pub const Smog: MoveData = MoveData {
        id: 123,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(70),
        _type: Type::Poison,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(30), Effect::NonVolatileStatus(NonVolatileBattleAilment::Poison(false), 40)],
    };
    pub const Sludge: MoveData = MoveData {
        id: 124,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Poison,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::NonVolatileStatus(NonVolatileBattleAilment::Poison(false), 30)],
    };
    pub const BoneClub: MoveData = MoveData {
        id: 125,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Ground,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::Flinch(10)],
    };
    pub const FireBlast: MoveData = MoveData {
        id: 126,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(110), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 10)],
    };
    pub const Waterfall: MoveData = MoveData {
        id: 127,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Water,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::Flinch(20)],
    };
    pub const Clamp: MoveData = MoveData {
        id: 128,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Water,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(35), Effect::Custom],
    };
    pub const Swift: MoveData = MoveData {
        id: 129,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(60)],
    };
    pub const SkullBash: MoveData = MoveData {
        id: 130,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(130)],
    };
    pub const SpikeCannon: MoveData = MoveData {
        id: 131,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(20), Effect::MultiHit(2, 5)],
    };
    pub const Constrict: MoveData = MoveData {
        id: 132,
        pp: 35,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(10), Effect::StatChange(BattleStat::Speed, -1, 10, StatChangeTarget::Target)],
    };
    pub const Amnesia: MoveData = MoveData {
        id: 133,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::SpecialDefense, 2, 100, StatChangeTarget::User)],
    };
    pub const Kinesis: MoveData = MoveData {
        id: 134,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(80),
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::StatChange(BattleStat::Accuracy, -1, 100, StatChangeTarget::Target)],
    };
    pub const SoftBoiled: MoveData = MoveData {
        id: 135,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::Heal(50)],
    };
    pub const HighJumpKick: MoveData = MoveData {
        id: 136,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(130)],
    };
    pub const Glare: MoveData = MoveData {
        id: 137,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 0)],
    };
    pub const DreamEater: MoveData = MoveData {
        id: 138,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100), Effect::Drain(50)],
    };
    pub const PoisonGas: MoveData = MoveData {
        id: 139,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Poison,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[Effect::NonVolatileStatus(NonVolatileBattleAilment::Poison(false), 0)],
    };
    pub const Barrage: MoveData = MoveData {
        id: 140,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(15), Effect::MultiHit(2, 5)],
    };
    pub const LeechLife: MoveData = MoveData {
        id: 141,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Bug,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::Drain(50)],
    };
    pub const LovelyKiss: MoveData = MoveData {
        id: 142,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(75),
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::NonVolatileStatus(NonVolatileBattleAilment::Sleep, 0)],
    };
    pub const SkyAttack: MoveData = MoveData {
        id: 143,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Flying,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(140), Effect::Critical(1), Effect::Flinch(30)],
    };
    pub const Transform: MoveData = MoveData {
        id: 144,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Bubble: MoveData = MoveData {
        id: 145,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Water,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(40), Effect::StatChange(BattleStat::Speed, -1, 10, StatChangeTarget::Target)],
    };
    pub const DizzyPunch: MoveData = MoveData {
        id: 146,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70), Effect::VolatileStatus(VolatileBattleAilment::Confusion, 20)],
    };
    pub const Spore: MoveData = MoveData {
        id: 147,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::NonVolatileStatus(NonVolatileBattleAilment::Sleep, 0)],
    };
    pub const Flash: MoveData = MoveData {
        id: 148,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::StatChange(BattleStat::Accuracy, -1, 100, StatChangeTarget::Target)],
    };
    pub const Psywave: MoveData = MoveData {
        id: 149,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Splash: MoveData = MoveData {
        id: 150,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const AcidArmor: MoveData = MoveData {
        id: 151,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Poison,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Defense, 2, 100, StatChangeTarget::User)],
    };
    pub const Crabhammer: MoveData = MoveData {
        id: 152,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Water,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100), Effect::Critical(1)],
    };
    pub const Explosion: MoveData = MoveData {
        id: 153,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllExceptUser,
        effects: &[Effect::Damage(250)],
    };
    pub const FurySwipes: MoveData = MoveData {
        id: 154,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(80),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(18), Effect::MultiHit(2, 5)],
    };
    pub const Bonemerang: MoveData = MoveData {
        id: 155,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Ground,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50), Effect::MultiHit(2, 2)],
    };
    pub const Rest: MoveData = MoveData {
        id: 156,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const RockSlide: MoveData = MoveData {
        id: 157,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Rock,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::Opponents,
        effects: &[Effect::Damage(75), Effect::Flinch(30)],
    };
    pub const HyperFang: MoveData = MoveData {
        id: 158,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::Flinch(10)],
    };
    pub const Sharpen: MoveData = MoveData {
        id: 159,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Attack, 1, 100, StatChangeTarget::User)],
    };
    pub const Conversion: MoveData = MoveData {
        id: 160,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const TriAttack: MoveData = MoveData {
        id: 161,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::Custom],
    };
    pub const SuperFang: MoveData = MoveData {
        id: 162,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Slash: MoveData = MoveData {
        id: 163,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70), Effect::Critical(1)],
    };
    pub const Substitute: MoveData = MoveData {
        id: 164,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Struggle: MoveData = MoveData {
        id: 165,
        pp: 1,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::RandomOpponent,
        effects: &[Effect::Damage(50), Effect::Recoil(25)],
    };
    pub const Sketch: MoveData = MoveData {
        id: 166,
        pp: 1,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const TripleKick: MoveData = MoveData {
        id: 167,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(10), Effect::MultiHit(3, 3)],
    };
    pub const Thief: MoveData = MoveData {
        id: 168,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const SpiderWeb: MoveData = MoveData {
        id: 169,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Bug,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const MindReader: MoveData = MoveData {
        id: 170,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Nightmare: MoveData = MoveData {
        id: 171,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ghost,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Custom],
    };
    pub const FlameWheel: MoveData = MoveData {
        id: 172,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 10)],
    };
    pub const Snore: MoveData = MoveData {
        id: 173,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50), Effect::Flinch(30)],
    };
    pub const Curse: MoveData = MoveData {
        id: 174,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Ghost,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Flail: MoveData = MoveData {
        id: 175,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Conversion2: MoveData = MoveData {
        id: 176,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Aeroblast: MoveData = MoveData {
        id: 177,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Flying,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100), Effect::Critical(1)],
    };
    pub const CottonSpore: MoveData = MoveData {
        id: 178,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[Effect::StatChange(BattleStat::Speed, -2, 100, StatChangeTarget::Target)],
    };
    pub const Reversal: MoveData = MoveData {
        id: 179,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Spite: MoveData = MoveData {
        id: 180,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ghost,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const PowderSnow: MoveData = MoveData {
        id: 181,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ice,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(40), Effect::NonVolatileStatus(NonVolatileBattleAilment::Freeze, 10)],
    };
    pub const Protect: MoveData = MoveData {
        id: 182,
        pp: 10,
        priority: 4,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const MachPunch: MoveData = MoveData {
        id: 183,
        pp: 30,
        priority: 1,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const ScaryFace: MoveData = MoveData {
        id: 184,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::StatChange(BattleStat::Speed, -2, 100, StatChangeTarget::Target)],
    };
    pub const FeintAttack: MoveData = MoveData {
        id: 185,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Dark,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const SweetKiss: MoveData = MoveData {
        id: 186,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(75),
        _type: Type::Fairy,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::VolatileStatus(VolatileBattleAilment::Confusion, 0)],
    };
    pub const BellyDrum: MoveData = MoveData {
        id: 187,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const SludgeBomb: MoveData = MoveData {
        id: 188,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Poison,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90), Effect::NonVolatileStatus(NonVolatileBattleAilment::Poison(false), 30)],
    };
    pub const MudSlap: MoveData = MoveData {
        id: 189,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ground,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(20), Effect::StatChange(BattleStat::Accuracy, -1, 100, StatChangeTarget::Target)],
    };
    pub const Octazooka: MoveData = MoveData {
        id: 190,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Water,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::StatChange(BattleStat::Accuracy, -1, 50, StatChangeTarget::Target)],
    };
    pub const Spikes: MoveData = MoveData {
        id: 191,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Ground,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[],
    };
    pub const ZapCannon: MoveData = MoveData {
        id: 192,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(50),
        _type: Type::Electric,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 100)],
    };
    pub const Foresight: MoveData = MoveData {
        id: 193,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Custom],
    };
    pub const DestinyBond: MoveData = MoveData {
        id: 194,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Ghost,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const PerishSong: MoveData = MoveData {
        id: 195,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::All,
        effects: &[Effect::Custom],
    };
    pub const IcyWind: MoveData = MoveData {
        id: 196,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Ice,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(55), Effect::StatChange(BattleStat::Speed, -1, 100, StatChangeTarget::Target)],
    };
    pub const Detect: MoveData = MoveData {
        id: 197,
        pp: 5,
        priority: 4,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const BoneRush: MoveData = MoveData {
        id: 198,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Ground,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(25), Effect::MultiHit(2, 5)],
    };
    pub const LockOn: MoveData = MoveData {
        id: 199,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Outrage: MoveData = MoveData {
        id: 200,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dragon,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::RandomOpponent,
        effects: &[Effect::Damage(120)],
    };
    pub const Sandstorm: MoveData = MoveData {
        id: 201,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Rock,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[Effect::ChangeWeather(Weather::Sandstorm)],
    };
    pub const GigaDrain: MoveData = MoveData {
        id: 202,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(75), Effect::Drain(50)],
    };
    pub const Endure: MoveData = MoveData {
        id: 203,
        pp: 10,
        priority: 4,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Charm: MoveData = MoveData {
        id: 204,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fairy,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::StatChange(BattleStat::Attack, -2, 100, StatChangeTarget::Target)],
    };
    pub const Rollout: MoveData = MoveData {
        id: 205,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Rock,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(30)],
    };
    pub const FalseSwipe: MoveData = MoveData {
        id: 206,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const Swagger: MoveData = MoveData {
        id: 207,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::StatChange(BattleStat::Attack, 2, 100, StatChangeTarget::Target), Effect::VolatileStatus(VolatileBattleAilment::Confusion, 0)],
    };
    pub const MilkDrink: MoveData = MoveData {
        id: 208,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::Heal(50)],
    };
    pub const Spark: MoveData = MoveData {
        id: 209,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Electric,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 30)],
    };
    pub const FuryCutter: MoveData = MoveData {
        id: 210,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Bug,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const SteelWing: MoveData = MoveData {
        id: 211,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Steel,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70), Effect::StatChange(BattleStat::Defense, 1, 10, StatChangeTarget::User)],
    };
    pub const MeanLook: MoveData = MoveData {
        id: 212,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Attract: MoveData = MoveData {
        id: 213,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::VolatileStatus(VolatileBattleAilment::Infatuation, 0)],
    };
    pub const SleepTalk: MoveData = MoveData {
        id: 214,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const HealBell: MoveData = MoveData {
        id: 215,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::UserAndAlly,
        effects: &[],
    };
    pub const Return: MoveData = MoveData {
        id: 216,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Present: MoveData = MoveData {
        id: 217,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Frustration: MoveData = MoveData {
        id: 218,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Safeguard: MoveData = MoveData {
        id: 219,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::UserAndAlly,
        effects: &[],
    };
    pub const PainSplit: MoveData = MoveData {
        id: 220,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const SacredFire: MoveData = MoveData {
        id: 221,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 50)],
    };
    pub const Magnitude: MoveData = MoveData {
        id: 222,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ground,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllExceptUser,
        effects: &[],
    };
    pub const DynamicPunch: MoveData = MoveData {
        id: 223,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(50),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100), Effect::VolatileStatus(VolatileBattleAilment::Confusion, 100)],
    };
    pub const Megahorn: MoveData = MoveData {
        id: 224,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Bug,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120)],
    };
    pub const DragonBreath: MoveData = MoveData {
        id: 225,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dragon,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 30)],
    };
    pub const BatonPass: MoveData = MoveData {
        id: 226,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Encore: MoveData = MoveData {
        id: 227,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Pursuit: MoveData = MoveData {
        id: 228,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const RapidSpin: MoveData = MoveData {
        id: 229,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50)],
    };
    pub const SweetScent: MoveData = MoveData {
        id: 230,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[Effect::StatChange(BattleStat::Evasion, -2, 100, StatChangeTarget::Target)],
    };
    pub const IronTail: MoveData = MoveData {
        id: 231,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(75),
        _type: Type::Steel,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100), Effect::StatChange(BattleStat::Defense, -1, 30, StatChangeTarget::Target)],
    };
    pub const MetalClaw: MoveData = MoveData {
        id: 232,
        pp: 35,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Steel,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50), Effect::StatChange(BattleStat::Attack, 1, 10, StatChangeTarget::User)],
    };
    pub const VitalThrow: MoveData = MoveData {
        id: 233,
        pp: 10,
        priority: -1,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70)],
    };
    pub const MorningSun: MoveData = MoveData {
        id: 234,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::Heal(50)],
    };
    pub const Synthesis: MoveData = MoveData {
        id: 235,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Grass,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::Heal(50)],
    };
    pub const Moonlight: MoveData = MoveData {
        id: 236,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Fairy,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::Heal(50)],
    };
    pub const HiddenPower: MoveData = MoveData {
        id: 237,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const CrossChop: MoveData = MoveData {
        id: 238,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(80),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100), Effect::Critical(1)],
    };
    pub const Twister: MoveData = MoveData {
        id: 239,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dragon,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(40), Effect::Flinch(20)],
    };
    pub const RainDance: MoveData = MoveData {
        id: 240,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Water,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[Effect::ChangeWeather(Weather::Rain)],
    };
    pub const SunnyDay: MoveData = MoveData {
        id: 241,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[Effect::ChangeWeather(Weather::HarshSun)],
    };
    pub const Crunch: MoveData = MoveData {
        id: 242,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::StatChange(BattleStat::Defense, -1, 20, StatChangeTarget::Target)],
    };
    pub const MirrorCoat: MoveData = MoveData {
        id: 243,
        pp: 20,
        priority: -5,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::User,
        effects: &[],
    };
    pub const PsychUp: MoveData = MoveData {
        id: 244,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const ExtremeSpeed: MoveData = MoveData {
        id: 245,
        pp: 5,
        priority: 2,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const AncientPower: MoveData = MoveData {
        id: 246,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Rock,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::StatChange(BattleStat::Attack, 1, 10, StatChangeTarget::User), Effect::StatChange(BattleStat::Defense, 1, 10, StatChangeTarget::User), Effect::StatChange(BattleStat::SpecialAttack, 1, 10, StatChangeTarget::User), Effect::StatChange(BattleStat::SpecialDefense, 1, 10, StatChangeTarget::User), Effect::StatChange(BattleStat::Speed, 1, 10, StatChangeTarget::User)],
    };
    pub const ShadowBall: MoveData = MoveData {
        id: 247,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ghost,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::StatChange(BattleStat::SpecialDefense, -1, 20, StatChangeTarget::Target)],
    };
    pub const FutureSight: MoveData = MoveData {
        id: 248,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120)],
    };
    pub const RockSmash: MoveData = MoveData {
        id: 249,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40), Effect::StatChange(BattleStat::Defense, -1, 50, StatChangeTarget::Target)],
    };
    pub const Whirlpool: MoveData = MoveData {
        id: 250,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Water,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(35), Effect::Custom],
    };
    pub const BeatUp: MoveData = MoveData {
        id: 251,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::MultiHit(6, 6)],
    };
    pub const FakeOut: MoveData = MoveData {
        id: 252,
        pp: 10,
        priority: 3,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40), Effect::Flinch(100)],
    };
    pub const Uproar: MoveData = MoveData {
        id: 253,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Special,
        target: Target::RandomOpponent,
        effects: &[Effect::Damage(90)],
    };
    pub const Stockpile: MoveData = MoveData {
        id: 254,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const SpitUp: MoveData = MoveData {
        id: 255,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Swallow: MoveData = MoveData {
        id: 256,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::Heal(25)],
    };
    pub const HeatWave: MoveData = MoveData {
        id: 257,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(95), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 10)],
    };
    pub const Hail: MoveData = MoveData {
        id: 258,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Ice,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[Effect::ChangeWeather(Weather::Hail)],
    };
    pub const Torment: MoveData = MoveData {
        id: 259,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Custom],
    };
    pub const Flatter: MoveData = MoveData {
        id: 260,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::StatChange(BattleStat::SpecialAttack, 1, 100, StatChangeTarget::Target), Effect::VolatileStatus(VolatileBattleAilment::Confusion, 0)],
    };
    pub const WillOWisp: MoveData = MoveData {
        id: 261,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 0)],
    };
    pub const Memento: MoveData = MoveData {
        id: 262,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Facade: MoveData = MoveData {
        id: 263,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70)],
    };
    pub const FocusPunch: MoveData = MoveData {
        id: 264,
        pp: 20,
        priority: -3,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(150)],
    };
    pub const SmellingSalts: MoveData = MoveData {
        id: 265,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70)],
    };
    pub const FollowMe: MoveData = MoveData {
        id: 266,
        pp: 20,
        priority: 2,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const NaturePower: MoveData = MoveData {
        id: 267,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Charge: MoveData = MoveData {
        id: 268,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Electric,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::SpecialDefense, 1, 100, StatChangeTarget::User)],
    };
    pub const Taunt: MoveData = MoveData {
        id: 269,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const HelpingHand: MoveData = MoveData {
        id: 270,
        pp: 20,
        priority: 5,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::Ally,
        effects: &[],
    };
    pub const Trick: MoveData = MoveData {
        id: 271,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const RolePlay: MoveData = MoveData {
        id: 272,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Wish: MoveData = MoveData {
        id: 273,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Assist: MoveData = MoveData {
        id: 274,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Ingrain: MoveData = MoveData {
        id: 275,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Grass,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::Custom],
    };
    pub const Superpower: MoveData = MoveData {
        id: 276,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120), Effect::StatChange(BattleStat::Attack, -1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::Defense, -1, 100, StatChangeTarget::User)],
    };
    pub const MagicCoat: MoveData = MoveData {
        id: 277,
        pp: 15,
        priority: 4,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Recycle: MoveData = MoveData {
        id: 278,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Revenge: MoveData = MoveData {
        id: 279,
        pp: 10,
        priority: -4,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const BrickBreak: MoveData = MoveData {
        id: 280,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(75)],
    };
    pub const Yawn: MoveData = MoveData {
        id: 281,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Custom],
    };
    pub const KnockOff: MoveData = MoveData {
        id: 282,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65)],
    };
    pub const Endeavor: MoveData = MoveData {
        id: 283,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Eruption: MoveData = MoveData {
        id: 284,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(150)],
    };
    pub const SkillSwap: MoveData = MoveData {
        id: 285,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Imprison: MoveData = MoveData {
        id: 286,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Refresh: MoveData = MoveData {
        id: 287,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Grudge: MoveData = MoveData {
        id: 288,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Ghost,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Snatch: MoveData = MoveData {
        id: 289,
        pp: 10,
        priority: 4,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Dark,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const SecretPower: MoveData = MoveData {
        id: 290,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70)],
    };
    pub const Dive: MoveData = MoveData {
        id: 291,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Water,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const ArmThrust: MoveData = MoveData {
        id: 292,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(15), Effect::MultiHit(2, 5)],
    };
    pub const Camouflage: MoveData = MoveData {
        id: 293,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const TailGlow: MoveData = MoveData {
        id: 294,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Bug,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::SpecialAttack, 3, 100, StatChangeTarget::User)],
    };
    pub const LusterPurge: MoveData = MoveData {
        id: 295,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70), Effect::StatChange(BattleStat::SpecialDefense, -1, 50, StatChangeTarget::Target)],
    };
    pub const MistBall: MoveData = MoveData {
        id: 296,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70), Effect::StatChange(BattleStat::SpecialAttack, -1, 50, StatChangeTarget::Target)],
    };
    pub const FeatherDance: MoveData = MoveData {
        id: 297,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Flying,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::StatChange(BattleStat::Attack, -2, 100, StatChangeTarget::Target)],
    };
    pub const TeeterDance: MoveData = MoveData {
        id: 298,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllExceptUser,
        effects: &[Effect::VolatileStatus(VolatileBattleAilment::Confusion, 0)],
    };
    pub const BlazeKick: MoveData = MoveData {
        id: 299,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(85), Effect::Critical(1), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 10)],
    };
    pub const MudSport: MoveData = MoveData {
        id: 300,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Ground,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[],
    };
    pub const IceBall: MoveData = MoveData {
        id: 301,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Ice,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(30)],
    };
    pub const NeedleArm: MoveData = MoveData {
        id: 302,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::Flinch(30)],
    };
    pub const SlackOff: MoveData = MoveData {
        id: 303,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::Heal(50)],
    };
    pub const HyperVoice: MoveData = MoveData {
        id: 304,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(90)],
    };
    pub const PoisonFang: MoveData = MoveData {
        id: 305,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Poison,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50), Effect::NonVolatileStatus(NonVolatileBattleAilment::Poison(false), 50)],
    };
    pub const CrushClaw: MoveData = MoveData {
        id: 306,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(75), Effect::StatChange(BattleStat::Defense, -1, 50, StatChangeTarget::Target)],
    };
    pub const BlastBurn: MoveData = MoveData {
        id: 307,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(150)],
    };
    pub const HydroCannon: MoveData = MoveData {
        id: 308,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Water,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(150)],
    };
    pub const MeteorMash: MoveData = MoveData {
        id: 309,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Steel,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90), Effect::StatChange(BattleStat::Attack, 1, 20, StatChangeTarget::User)],
    };
    pub const Astonish: MoveData = MoveData {
        id: 310,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ghost,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(30), Effect::Flinch(30)],
    };
    pub const WeatherBall: MoveData = MoveData {
        id: 311,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50)],
    };
    pub const Aromatherapy: MoveData = MoveData {
        id: 312,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Grass,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::UserAndAlly,
        effects: &[],
    };
    pub const FakeTears: MoveData = MoveData {
        id: 313,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::StatChange(BattleStat::SpecialDefense, -2, 100, StatChangeTarget::Target)],
    };
    pub const AirCutter: MoveData = MoveData {
        id: 314,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Flying,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(60), Effect::Critical(1)],
    };
    pub const Overheat: MoveData = MoveData {
        id: 315,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(130), Effect::StatChange(BattleStat::SpecialAttack, -2, 100, StatChangeTarget::User)],
    };
    pub const OdorSleuth: MoveData = MoveData {
        id: 316,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Custom],
    };
    pub const RockTomb: MoveData = MoveData {
        id: 317,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Rock,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::StatChange(BattleStat::Speed, -1, 100, StatChangeTarget::Target)],
    };
    pub const SilverWind: MoveData = MoveData {
        id: 318,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Bug,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::StatChange(BattleStat::Attack, 1, 10, StatChangeTarget::User), Effect::StatChange(BattleStat::Defense, 1, 10, StatChangeTarget::User), Effect::StatChange(BattleStat::SpecialAttack, 1, 10, StatChangeTarget::User), Effect::StatChange(BattleStat::SpecialDefense, 1, 10, StatChangeTarget::User), Effect::StatChange(BattleStat::Speed, 1, 10, StatChangeTarget::User)],
    };
    pub const MetalSound: MoveData = MoveData {
        id: 319,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Steel,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::StatChange(BattleStat::SpecialDefense, -2, 100, StatChangeTarget::Target)],
    };
    pub const GrassWhistle: MoveData = MoveData {
        id: 320,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(55),
        _type: Type::Grass,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::NonVolatileStatus(NonVolatileBattleAilment::Sleep, 0)],
    };
    pub const Tickle: MoveData = MoveData {
        id: 321,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::StatChange(BattleStat::Attack, -1, 100, StatChangeTarget::Target), Effect::StatChange(BattleStat::Defense, -1, 100, StatChangeTarget::Target)],
    };
    pub const CosmicPower: MoveData = MoveData {
        id: 322,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Defense, 1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::SpecialDefense, 1, 100, StatChangeTarget::User)],
    };
    pub const WaterSpout: MoveData = MoveData {
        id: 323,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Water,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(150)],
    };
    pub const SignalBeam: MoveData = MoveData {
        id: 324,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Bug,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(75), Effect::VolatileStatus(VolatileBattleAilment::Confusion, 10)],
    };
    pub const ShadowPunch: MoveData = MoveData {
        id: 325,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Ghost,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const Extrasensory: MoveData = MoveData {
        id: 326,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::Flinch(10)],
    };
    pub const SkyUppercut: MoveData = MoveData {
        id: 327,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(85)],
    };
    pub const SandTomb: MoveData = MoveData {
        id: 328,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Ground,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(35), Effect::Custom],
    };
    pub const SheerCold: MoveData = MoveData {
        id: 329,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(30),
        _type: Type::Ice,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::OneHitKnockout],
    };
    pub const MuddyWater: MoveData = MoveData {
        id: 330,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Water,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(90), Effect::StatChange(BattleStat::Accuracy, -1, 30, StatChangeTarget::Target)],
    };
    pub const BulletSeed: MoveData = MoveData {
        id: 331,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(25), Effect::MultiHit(2, 5)],
    };
    pub const AerialAce: MoveData = MoveData {
        id: 332,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Flying,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const IcicleSpear: MoveData = MoveData {
        id: 333,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ice,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(25), Effect::MultiHit(2, 5)],
    };
    pub const IronDefense: MoveData = MoveData {
        id: 334,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Steel,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Defense, 2, 100, StatChangeTarget::User)],
    };
    pub const Block: MoveData = MoveData {
        id: 335,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Howl: MoveData = MoveData {
        id: 336,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Attack, 1, 100, StatChangeTarget::User)],
    };
    pub const DragonClaw: MoveData = MoveData {
        id: 337,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dragon,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const FrenzyPlant: MoveData = MoveData {
        id: 338,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Grass,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(150)],
    };
    pub const BulkUp: MoveData = MoveData {
        id: 339,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Fighting,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Attack, 1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::Defense, 1, 100, StatChangeTarget::User)],
    };
    pub const Bounce: MoveData = MoveData {
        id: 340,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Flying,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(85), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 30)],
    };
    pub const MudShot: MoveData = MoveData {
        id: 341,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Ground,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(55), Effect::StatChange(BattleStat::Speed, -1, 100, StatChangeTarget::Target)],
    };
    pub const PoisonTail: MoveData = MoveData {
        id: 342,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Poison,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50), Effect::Critical(1), Effect::NonVolatileStatus(NonVolatileBattleAilment::Poison(false), 10)],
    };
    pub const Covet: MoveData = MoveData {
        id: 343,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const VoltTackle: MoveData = MoveData {
        id: 344,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Electric,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120), Effect::Recoil(33), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 10)],
    };
    pub const MagicalLeaf: MoveData = MoveData {
        id: 345,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Grass,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const WaterSport: MoveData = MoveData {
        id: 346,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Water,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[],
    };
    pub const CalmMind: MoveData = MoveData {
        id: 347,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::SpecialAttack, 1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::SpecialDefense, 1, 100, StatChangeTarget::User)],
    };
    pub const LeafBlade: MoveData = MoveData {
        id: 348,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90), Effect::Critical(1)],
    };
    pub const DragonDance: MoveData = MoveData {
        id: 349,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Dragon,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Attack, 1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::Speed, 1, 100, StatChangeTarget::User)],
    };
    pub const RockBlast: MoveData = MoveData {
        id: 350,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Rock,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(25), Effect::MultiHit(2, 5)],
    };
    pub const ShockWave: MoveData = MoveData {
        id: 351,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Electric,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const WaterPulse: MoveData = MoveData {
        id: 352,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Water,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::VolatileStatus(VolatileBattleAilment::Confusion, 20)],
    };
    pub const DoomDesire: MoveData = MoveData {
        id: 353,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Steel,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(140)],
    };
    pub const PsychoBoost: MoveData = MoveData {
        id: 354,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Psychic,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(140), Effect::StatChange(BattleStat::SpecialAttack, -2, 100, StatChangeTarget::User)],
    };
    pub const Roost: MoveData = MoveData {
        id: 355,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Flying,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::Heal(50)],
    };
    pub const Gravity: MoveData = MoveData {
        id: 356,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[],
    };
    pub const MiracleEye: MoveData = MoveData {
        id: 357,
        pp: 40,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Custom],
    };
    pub const WakeUpSlap: MoveData = MoveData {
        id: 358,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70)],
    };
    pub const HammerArm: MoveData = MoveData {
        id: 359,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100), Effect::StatChange(BattleStat::Speed, -1, 100, StatChangeTarget::User)],
    };
    pub const GyroBall: MoveData = MoveData {
        id: 360,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Steel,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const HealingWish: MoveData = MoveData {
        id: 361,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Brine: MoveData = MoveData {
        id: 362,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Water,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65)],
    };
    pub const NaturalGift: MoveData = MoveData {
        id: 363,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Feint: MoveData = MoveData {
        id: 364,
        pp: 10,
        priority: 2,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(30)],
    };
    pub const Pluck: MoveData = MoveData {
        id: 365,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Flying,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const Tailwind: MoveData = MoveData {
        id: 366,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Flying,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::UserAndAlly,
        effects: &[],
    };
    pub const Acupressure: MoveData = MoveData {
        id: 367,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::UserOrAlly,
        effects: &[],
    };
    pub const MetalBurst: MoveData = MoveData {
        id: 368,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Steel,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::User,
        effects: &[],
    };
    pub const UTurn: MoveData = MoveData {
        id: 369,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Bug,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70), Effect::ForceUserSwitch],
    };
    pub const CloseCombat: MoveData = MoveData {
        id: 370,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120), Effect::StatChange(BattleStat::Defense, -1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::SpecialDefense, -1, 100, StatChangeTarget::User)],
    };
    pub const Payback: MoveData = MoveData {
        id: 371,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50)],
    };
    pub const Assurance: MoveData = MoveData {
        id: 372,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const Embargo: MoveData = MoveData {
        id: 373,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Custom],
    };
    pub const Fling: MoveData = MoveData {
        id: 374,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const PsychoShift: MoveData = MoveData {
        id: 375,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const TrumpCard: MoveData = MoveData {
        id: 376,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const HealBlock: MoveData = MoveData {
        id: 377,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[Effect::Custom],
    };
    pub const WringOut: MoveData = MoveData {
        id: 378,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const PowerTrick: MoveData = MoveData {
        id: 379,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const GastroAcid: MoveData = MoveData {
        id: 380,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Poison,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const LuckyChant: MoveData = MoveData {
        id: 381,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::UserAndAlly,
        effects: &[],
    };
    pub const MeFirst: MoveData = MoveData {
        id: 382,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::Opponent,
        effects: &[],
    };
    pub const Copycat: MoveData = MoveData {
        id: 383,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const PowerSwap: MoveData = MoveData {
        id: 384,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const GuardSwap: MoveData = MoveData {
        id: 385,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Punishment: MoveData = MoveData {
        id: 386,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const LastResort: MoveData = MoveData {
        id: 387,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(140)],
    };
    pub const WorrySeed: MoveData = MoveData {
        id: 388,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const SuckerPunch: MoveData = MoveData {
        id: 389,
        pp: 5,
        priority: 1,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70)],
    };
    pub const ToxicSpikes: MoveData = MoveData {
        id: 390,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Poison,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[],
    };
    pub const HeartSwap: MoveData = MoveData {
        id: 391,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const AquaRing: MoveData = MoveData {
        id: 392,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Water,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const MagnetRise: MoveData = MoveData {
        id: 393,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Electric,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const FlareBlitz: MoveData = MoveData {
        id: 394,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120), Effect::Recoil(33), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 10)],
    };
    pub const ForcePalm: MoveData = MoveData {
        id: 395,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 30)],
    };
    pub const AuraSphere: MoveData = MoveData {
        id: 396,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Fighting,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const RockPolish: MoveData = MoveData {
        id: 397,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Rock,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Speed, 2, 100, StatChangeTarget::User)],
    };
    pub const PoisonJab: MoveData = MoveData {
        id: 398,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Poison,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::NonVolatileStatus(NonVolatileBattleAilment::Poison(false), 30)],
    };
    pub const DarkPulse: MoveData = MoveData {
        id: 399,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::Flinch(20)],
    };
    pub const NightSlash: MoveData = MoveData {
        id: 400,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70), Effect::Critical(1)],
    };
    pub const AquaTail: MoveData = MoveData {
        id: 401,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Water,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90)],
    };
    pub const SeedBomb: MoveData = MoveData {
        id: 402,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const AirSlash: MoveData = MoveData {
        id: 403,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Flying,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(75), Effect::Flinch(30)],
    };
    pub const XScissor: MoveData = MoveData {
        id: 404,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Bug,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const BugBuzz: MoveData = MoveData {
        id: 405,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Bug,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90), Effect::StatChange(BattleStat::SpecialDefense, -1, 10, StatChangeTarget::Target)],
    };
    pub const DragonPulse: MoveData = MoveData {
        id: 406,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dragon,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(85)],
    };
    pub const DragonRush: MoveData = MoveData {
        id: 407,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(75),
        _type: Type::Dragon,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100), Effect::Flinch(20)],
    };
    pub const PowerGem: MoveData = MoveData {
        id: 408,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Rock,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const DrainPunch: MoveData = MoveData {
        id: 409,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(75), Effect::Drain(50)],
    };
    pub const VacuumWave: MoveData = MoveData {
        id: 410,
        pp: 30,
        priority: 1,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const FocusBlast: MoveData = MoveData {
        id: 411,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(70),
        _type: Type::Fighting,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120), Effect::StatChange(BattleStat::SpecialDefense, -1, 10, StatChangeTarget::Target)],
    };
    pub const EnergyBall: MoveData = MoveData {
        id: 412,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90), Effect::StatChange(BattleStat::SpecialDefense, -1, 10, StatChangeTarget::Target)],
    };
    pub const BraveBird: MoveData = MoveData {
        id: 413,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Flying,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120), Effect::Recoil(33)],
    };
    pub const EarthPower: MoveData = MoveData {
        id: 414,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ground,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90), Effect::StatChange(BattleStat::SpecialDefense, -1, 10, StatChangeTarget::Target)],
    };
    pub const Switcheroo: MoveData = MoveData {
        id: 415,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const GigaImpact: MoveData = MoveData {
        id: 416,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(150)],
    };
    pub const NastyPlot: MoveData = MoveData {
        id: 417,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Dark,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::SpecialAttack, 2, 100, StatChangeTarget::User)],
    };
    pub const BulletPunch: MoveData = MoveData {
        id: 418,
        pp: 30,
        priority: 1,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Steel,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const Avalanche: MoveData = MoveData {
        id: 419,
        pp: 10,
        priority: -4,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ice,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const IceShard: MoveData = MoveData {
        id: 420,
        pp: 30,
        priority: 1,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ice,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const ShadowClaw: MoveData = MoveData {
        id: 421,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ghost,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70), Effect::Critical(1)],
    };
    pub const ThunderFang: MoveData = MoveData {
        id: 422,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Electric,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::Flinch(10), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 10)],
    };
    pub const IceFang: MoveData = MoveData {
        id: 423,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Ice,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::Flinch(10), Effect::NonVolatileStatus(NonVolatileBattleAilment::Freeze, 10)],
    };
    pub const FireFang: MoveData = MoveData {
        id: 424,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Fire,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::Flinch(10), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 10)],
    };
    pub const ShadowSneak: MoveData = MoveData {
        id: 425,
        pp: 30,
        priority: 1,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ghost,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const MudBomb: MoveData = MoveData {
        id: 426,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Ground,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::StatChange(BattleStat::Accuracy, -1, 30, StatChangeTarget::Target)],
    };
    pub const PsychoCut: MoveData = MoveData {
        id: 427,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70), Effect::Critical(1)],
    };
    pub const ZenHeadbutt: MoveData = MoveData {
        id: 428,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Psychic,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::Flinch(20)],
    };
    pub const MirrorShot: MoveData = MoveData {
        id: 429,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Steel,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::StatChange(BattleStat::Accuracy, -1, 30, StatChangeTarget::Target)],
    };
    pub const FlashCannon: MoveData = MoveData {
        id: 430,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Steel,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::StatChange(BattleStat::SpecialDefense, -1, 10, StatChangeTarget::Target)],
    };
    pub const RockClimb: MoveData = MoveData {
        id: 431,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Normal,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90), Effect::VolatileStatus(VolatileBattleAilment::Confusion, 20)],
    };
    pub const Defog: MoveData = MoveData {
        id: 432,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Flying,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::DispelWeather],
    };
    pub const TrickRoom: MoveData = MoveData {
        id: 433,
        pp: 5,
        priority: -7,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[],
    };
    pub const DracoMeteor: MoveData = MoveData {
        id: 434,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Dragon,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(130), Effect::StatChange(BattleStat::SpecialAttack, -2, 100, StatChangeTarget::User)],
    };
    pub const Discharge: MoveData = MoveData {
        id: 435,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Electric,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllExceptUser,
        effects: &[Effect::Damage(80), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 30)],
    };
    pub const LavaPlume: MoveData = MoveData {
        id: 436,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllExceptUser,
        effects: &[Effect::Damage(80), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 30)],
    };
    pub const LeafStorm: MoveData = MoveData {
        id: 437,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Grass,
        contest_type: ContestType::Cute,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(130), Effect::StatChange(BattleStat::SpecialAttack, -2, 100, StatChangeTarget::User)],
    };
    pub const PowerWhip: MoveData = MoveData {
        id: 438,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Grass,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120)],
    };
    pub const RockWrecker: MoveData = MoveData {
        id: 439,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Rock,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(150)],
    };
    pub const CrossPoison: MoveData = MoveData {
        id: 440,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Poison,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70), Effect::Critical(1), Effect::NonVolatileStatus(NonVolatileBattleAilment::Poison(false), 10)],
    };
    pub const GunkShot: MoveData = MoveData {
        id: 441,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(80),
        _type: Type::Poison,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120), Effect::NonVolatileStatus(NonVolatileBattleAilment::Poison(false), 30)],
    };
    pub const IronHead: MoveData = MoveData {
        id: 442,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Steel,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::Flinch(30)],
    };
    pub const MagnetBomb: MoveData = MoveData {
        id: 443,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Steel,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const StoneEdge: MoveData = MoveData {
        id: 444,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(80),
        _type: Type::Rock,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100), Effect::Critical(1)],
    };
    pub const Captivate: MoveData = MoveData {
        id: 445,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[Effect::StatChange(BattleStat::SpecialAttack, -2, 100, StatChangeTarget::Target)],
    };
    pub const StealthRock: MoveData = MoveData {
        id: 446,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Rock,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[],
    };
    pub const GrassKnot: MoveData = MoveData {
        id: 447,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Chatter: MoveData = MoveData {
        id: 448,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Flying,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::VolatileStatus(VolatileBattleAilment::Confusion, 100)],
    };
    pub const Judgment: MoveData = MoveData {
        id: 449,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100)],
    };
    pub const BugBite: MoveData = MoveData {
        id: 450,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Bug,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const ChargeBeam: MoveData = MoveData {
        id: 451,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Electric,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50), Effect::StatChange(BattleStat::SpecialAttack, 1, 70, StatChangeTarget::User)],
    };
    pub const WoodHammer: MoveData = MoveData {
        id: 452,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120), Effect::Recoil(33)],
    };
    pub const AquaJet: MoveData = MoveData {
        id: 453,
        pp: 20,
        priority: 1,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Water,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const AttackOrder: MoveData = MoveData {
        id: 454,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Bug,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90), Effect::Critical(1)],
    };
    pub const DefendOrder: MoveData = MoveData {
        id: 455,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Bug,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Defense, 1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::SpecialDefense, 1, 100, StatChangeTarget::User)],
    };
    pub const HealOrder: MoveData = MoveData {
        id: 456,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Bug,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::Heal(50)],
    };
    pub const HeadSmash: MoveData = MoveData {
        id: 457,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(80),
        _type: Type::Rock,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(150), Effect::Recoil(50)],
    };
    pub const DoubleHit: MoveData = MoveData {
        id: 458,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Normal,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(35), Effect::MultiHit(2, 2)],
    };
    pub const RoarOfTime: MoveData = MoveData {
        id: 459,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Dragon,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(150)],
    };
    pub const SpacialRend: MoveData = MoveData {
        id: 460,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Dragon,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100), Effect::Critical(1)],
    };
    pub const LunarDance: MoveData = MoveData {
        id: 461,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Beauty,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const CrushGrip: MoveData = MoveData {
        id: 462,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const MagmaStorm: MoveData = MoveData {
        id: 463,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(75),
        _type: Type::Fire,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100), Effect::Custom],
    };
    pub const DarkVoid: MoveData = MoveData {
        id: 464,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(50),
        _type: Type::Dark,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[Effect::NonVolatileStatus(NonVolatileBattleAilment::Sleep, 0)],
    };
    pub const SeedFlare: MoveData = MoveData {
        id: 465,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Grass,
        contest_type: ContestType::Cool,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120), Effect::StatChange(BattleStat::SpecialDefense, -2, 40, StatChangeTarget::Target)],
    };
    pub const OminousWind: MoveData = MoveData {
        id: 466,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ghost,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::StatChange(BattleStat::Attack, 1, 10, StatChangeTarget::User), Effect::StatChange(BattleStat::Defense, 1, 10, StatChangeTarget::User), Effect::StatChange(BattleStat::SpecialAttack, 1, 10, StatChangeTarget::User), Effect::StatChange(BattleStat::SpecialDefense, 1, 10, StatChangeTarget::User), Effect::StatChange(BattleStat::Speed, 1, 10, StatChangeTarget::User)],
    };
    pub const ShadowForce: MoveData = MoveData {
        id: 467,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ghost,
        contest_type: ContestType::Smart,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120)],
    };
    pub const HoneClaws: MoveData = MoveData {
        id: 468,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Dark,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Attack, 1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::Accuracy, 1, 100, StatChangeTarget::User)],
    };
    pub const WideGuard: MoveData = MoveData {
        id: 469,
        pp: 10,
        priority: 3,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Rock,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::UserAndAlly,
        effects: &[],
    };
    pub const GuardSplit: MoveData = MoveData {
        id: 470,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const PowerSplit: MoveData = MoveData {
        id: 471,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const WonderRoom: MoveData = MoveData {
        id: 472,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[],
    };
    pub const Psyshock: MoveData = MoveData {
        id: 473,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const Venoshock: MoveData = MoveData {
        id: 474,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Poison,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65)],
    };
    pub const Autotomize: MoveData = MoveData {
        id: 475,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Steel,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Speed, 2, 100, StatChangeTarget::User)],
    };
    pub const RagePowder: MoveData = MoveData {
        id: 476,
        pp: 20,
        priority: 2,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Bug,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Telekinesis: MoveData = MoveData {
        id: 477,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Custom],
    };
    pub const MagicRoom: MoveData = MoveData {
        id: 478,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::Opponents,
        effects: &[],
    };
    pub const SmackDown: MoveData = MoveData {
        id: 479,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Rock,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50), Effect::Custom],
    };
    pub const StormThrow: MoveData = MoveData {
        id: 480,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::Critical(6)],
    };
    pub const FlameBurst: MoveData = MoveData {
        id: 481,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70)],
    };
    pub const SludgeWave: MoveData = MoveData {
        id: 482,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Poison,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllExceptUser,
        effects: &[Effect::Damage(95), Effect::NonVolatileStatus(NonVolatileBattleAilment::Poison(false), 10)],
    };
    pub const QuiverDance: MoveData = MoveData {
        id: 483,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Bug,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::SpecialAttack, 1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::SpecialDefense, 1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::Speed, 1, 100, StatChangeTarget::User)],
    };
    pub const HeavySlam: MoveData = MoveData {
        id: 484,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Steel,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Synchronoise: MoveData = MoveData {
        id: 485,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllExceptUser,
        effects: &[Effect::Damage(120)],
    };
    pub const ElectroBall: MoveData = MoveData {
        id: 486,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Electric,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Soak: MoveData = MoveData {
        id: 487,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Water,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const FlameCharge: MoveData = MoveData {
        id: 488,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50), Effect::StatChange(BattleStat::Speed, 1, 100, StatChangeTarget::User)],
    };
    pub const Coil: MoveData = MoveData {
        id: 489,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Poison,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Attack, 1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::Defense, 1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::Accuracy, 1, 100, StatChangeTarget::User)],
    };
    pub const LowSweep: MoveData = MoveData {
        id: 490,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::StatChange(BattleStat::Speed, -1, 100, StatChangeTarget::Target)],
    };
    pub const AcidSpray: MoveData = MoveData {
        id: 491,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Poison,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40), Effect::StatChange(BattleStat::SpecialDefense, -2, 100, StatChangeTarget::Target)],
    };
    pub const FoulPlay: MoveData = MoveData {
        id: 492,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(95)],
    };
    pub const SimpleBeam: MoveData = MoveData {
        id: 493,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Entrainment: MoveData = MoveData {
        id: 494,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const AfterYou: MoveData = MoveData {
        id: 495,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Round: MoveData = MoveData {
        id: 496,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const EchoedVoice: MoveData = MoveData {
        id: 497,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40)],
    };
    pub const ChipAway: MoveData = MoveData {
        id: 498,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70)],
    };
    pub const ClearSmog: MoveData = MoveData {
        id: 499,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Poison,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50)],
    };
    pub const StoredPower: MoveData = MoveData {
        id: 500,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(20)],
    };
    pub const QuickGuard: MoveData = MoveData {
        id: 501,
        pp: 15,
        priority: 3,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::UserAndAlly,
        effects: &[],
    };
    pub const AllySwitch: MoveData = MoveData {
        id: 502,
        pp: 15,
        priority: 2,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const Scald: MoveData = MoveData {
        id: 503,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Water,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 30)],
    };
    pub const ShellSmash: MoveData = MoveData {
        id: 504,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[],
    };
    pub const HealPulse: MoveData = MoveData {
        id: 505,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Psychic,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Heal(50)],
    };
    pub const Hex: MoveData = MoveData {
        id: 506,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ghost,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65)],
    };
    pub const SkyDrop: MoveData = MoveData {
        id: 507,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Flying,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60)],
    };
    pub const ShiftGear: MoveData = MoveData {
        id: 508,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Steel,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Attack, 1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::Speed, 2, 100, StatChangeTarget::User)],
    };
    pub const CircleThrow: MoveData = MoveData {
        id: 509,
        pp: 10,
        priority: -6,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::ForceTargetSwitch],
    };
    pub const Incinerate: MoveData = MoveData {
        id: 510,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(60)],
    };
    pub const Quash: MoveData = MoveData {
        id: 511,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Dark,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Acrobatics: MoveData = MoveData {
        id: 512,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Flying,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(55)],
    };
    pub const ReflectType: MoveData = MoveData {
        id: 513,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Retaliate: MoveData = MoveData {
        id: 514,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70)],
    };
    pub const FinalGambit: MoveData = MoveData {
        id: 515,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Bestow: MoveData = MoveData {
        id: 516,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const Inferno: MoveData = MoveData {
        id: 517,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(50),
        _type: Type::Fire,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 100)],
    };
    pub const WaterPledge: MoveData = MoveData {
        id: 518,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Water,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const FirePledge: MoveData = MoveData {
        id: 519,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const GrassPledge: MoveData = MoveData {
        id: 520,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80)],
    };
    pub const VoltSwitch: MoveData = MoveData {
        id: 521,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Electric,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(70), Effect::ForceUserSwitch],
    };
    pub const StruggleBug: MoveData = MoveData {
        id: 522,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Bug,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(50), Effect::StatChange(BattleStat::SpecialAttack, -1, 100, StatChangeTarget::Target)],
    };
    pub const Bulldoze: MoveData = MoveData {
        id: 523,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Ground,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllExceptUser,
        effects: &[Effect::Damage(60), Effect::StatChange(BattleStat::Speed, -1, 100, StatChangeTarget::Target)],
    };
    pub const FrostBreath: MoveData = MoveData {
        id: 524,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Ice,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::Critical(6)],
    };
    pub const DragonTail: MoveData = MoveData {
        id: 525,
        pp: 10,
        priority: -6,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Dragon,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::ForceTargetSwitch],
    };
    pub const WorkUp: MoveData = MoveData {
        id: 526,
        pp: 30,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Attack, 1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::SpecialAttack, 1, 100, StatChangeTarget::User)],
    };
    pub const Electroweb: MoveData = MoveData {
        id: 527,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Electric,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(55), Effect::StatChange(BattleStat::Speed, -1, 100, StatChangeTarget::Target)],
    };
    pub const WildCharge: MoveData = MoveData {
        id: 528,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Electric,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90), Effect::Recoil(25)],
    };
    pub const DrillRun: MoveData = MoveData {
        id: 529,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Ground,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::Critical(1)],
    };
    pub const DualChop: MoveData = MoveData {
        id: 530,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Dragon,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(40), Effect::MultiHit(2, 2)],
    };
    pub const HeartStamp: MoveData = MoveData {
        id: 531,
        pp: 25,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(60), Effect::Flinch(30)],
    };
    pub const HornLeech: MoveData = MoveData {
        id: 532,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Grass,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(75), Effect::Drain(50)],
    };
    pub const SacredSword: MoveData = MoveData {
        id: 533,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(90)],
    };
    pub const RazorShell: MoveData = MoveData {
        id: 534,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Water,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(75), Effect::StatChange(BattleStat::Defense, -1, 50, StatChangeTarget::Target)],
    };
    pub const HeatCrash: MoveData = MoveData {
        id: 535,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[],
    };
    pub const LeafTornado: MoveData = MoveData {
        id: 536,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Grass,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::StatChange(BattleStat::Accuracy, -1, 50, StatChangeTarget::Target)],
    };
    pub const Steamroller: MoveData = MoveData {
        id: 537,
        pp: 20,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Bug,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(65), Effect::Flinch(30)],
    };
    pub const CottonGuard: MoveData = MoveData {
        id: 538,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::AlwaysHits,
        _type: Type::Grass,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Status,
        target: Target::User,
        effects: &[Effect::StatChange(BattleStat::Defense, 3, 100, StatChangeTarget::User)],
    };
    pub const NightDaze: MoveData = MoveData {
        id: 539,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Dark,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(85), Effect::StatChange(BattleStat::Accuracy, -1, 40, StatChangeTarget::Target)],
    };
    pub const Psystrike: MoveData = MoveData {
        id: 540,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Psychic,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100)],
    };
    pub const TailSlap: MoveData = MoveData {
        id: 541,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(25), Effect::MultiHit(2, 5)],
    };
    pub const Hurricane: MoveData = MoveData {
        id: 542,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(70),
        _type: Type::Flying,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(110), Effect::VolatileStatus(VolatileBattleAilment::Confusion, 30)],
    };
    pub const HeadCharge: MoveData = MoveData {
        id: 543,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120), Effect::Recoil(25)],
    };
    pub const GearGrind: MoveData = MoveData {
        id: 544,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Steel,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(50), Effect::MultiHit(2, 2)],
    };
    pub const SearingShot: MoveData = MoveData {
        id: 545,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllExceptUser,
        effects: &[Effect::Damage(100), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 30)],
    };
    pub const TechnoBlast: MoveData = MoveData {
        id: 546,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(120)],
    };
    pub const RelicSong: MoveData = MoveData {
        id: 547,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Normal,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(75), Effect::NonVolatileStatus(NonVolatileBattleAilment::Sleep, 10)],
    };
    pub const SecretSword: MoveData = MoveData {
        id: 548,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fighting,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(85)],
    };
    pub const Glaciate: MoveData = MoveData {
        id: 549,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Ice,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(65), Effect::StatChange(BattleStat::Speed, -1, 100, StatChangeTarget::Target)],
    };
    pub const BoltStrike: MoveData = MoveData {
        id: 550,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Electric,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(130), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 20)],
    };
    pub const BlueFlare: MoveData = MoveData {
        id: 551,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(85),
        _type: Type::Fire,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(130), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 20)],
    };
    pub const FieryDance: MoveData = MoveData {
        id: 552,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(80), Effect::StatChange(BattleStat::SpecialAttack, 1, 50, StatChangeTarget::User)],
    };
    pub const FreezeShock: MoveData = MoveData {
        id: 553,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Ice,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(140), Effect::NonVolatileStatus(NonVolatileBattleAilment::Paralysis, 30)],
    };
    pub const IceBurn: MoveData = MoveData {
        id: 554,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Ice,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(140), Effect::NonVolatileStatus(NonVolatileBattleAilment::Burn, 30)],
    };
    pub const Snarl: MoveData = MoveData {
        id: 555,
        pp: 15,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Dark,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::Opponents,
        effects: &[Effect::Damage(55), Effect::StatChange(BattleStat::SpecialAttack, -1, 100, StatChangeTarget::Target)],
    };
    pub const IcicleCrash: MoveData = MoveData {
        id: 556,
        pp: 10,
        priority: 0,
        accuracy: Accuracy::Percentage(90),
        _type: Type::Ice,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(85), Effect::Flinch(30)],
    };
    pub const VCreate: MoveData = MoveData {
        id: 557,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(95),
        _type: Type::Fire,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(180), Effect::StatChange(BattleStat::Defense, -1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::SpecialDefense, -1, 100, StatChangeTarget::User), Effect::StatChange(BattleStat::Speed, -1, 100, StatChangeTarget::User)],
    };
    pub const FusionFlare: MoveData = MoveData {
        id: 558,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Fire,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Special,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100)],
    };
    pub const FusionBolt: MoveData = MoveData {
        id: 559,
        pp: 5,
        priority: 0,
        accuracy: Accuracy::Percentage(100),
        _type: Type::Electric,
        contest_type: ContestType::Tough,
        damage_type: DamageType::Physical,
        target: Target::AllyOrOpponent,
        effects: &[Effect::Damage(100)],
    };
}
//endregion